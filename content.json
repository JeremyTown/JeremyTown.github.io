{"meta":{"title":"你的🌛我的❤️","subtitle":null,"description":null,"author":"Jeremy","url":"http://yoursite.com","root":"/"},"pages":[{"title":"about","date":"2019-07-23T07:44:29.000Z","updated":"2019-07-23T08:12:55.960Z","comments":true,"path":"about/index.html","permalink":"http://yoursite.com/about/index.html","excerpt":"","text":""}],"posts":[{"title":"Git 指南","slug":"git","date":"2019-05-25T16:00:00.000Z","updated":"2019-07-23T07:19:40.893Z","comments":true,"path":"2019/05/26/git/","link":"","permalink":"http://yoursite.com/2019/05/26/git/","excerpt":"","text":"1. 获取 Git 仓库在现有目录中初始化仓库1git init 克隆现有的仓库1git clone https://github.com/libgit2/libgit2 mylibgit 2. 记录每次更新到仓库检查当前文件状态1git status 跟踪新文件12git add READMEgit status 暂存已修改文件状态简览12git status --shortgit status -s 忽略文件使用 .gitignore 文件 所有空行或者以 ＃ 开头的行都会被 Git 忽略。 可以使用标准的 glob 模式匹配。 匹配模式可以以（/）开头防止递归。 匹配模式可以以（/）结尾指定目录。 要忽略指定模式以外的文件或目录，可以在模式前加上惊叹号（!）取反。 glob 模式 星号（*）匹配零个或多个任意字符； [abc] 匹配任何一个列在方括号中的字符； 问号（?）只匹配一个任意字符； 如果在方括号中使用短划线分隔两个字符，表示所有在这两个字符范围内的都可以匹配； 使用两个星号（*) 表示匹配任意中间目录。 查看已暂存和未暂存的修改 查看尚未暂存的文件更新了哪些部分 1git diff 查看已暂存的将要添加到下次提交里的内容 12git diff --stagedgit diff --cached 提交更新1git commit -m \"first commit\" 跳过使用暂存区域1git commit -a -m \"second commit\" 移除文件1git rm [file_name] 把文件从 Git 仓库中删除，文件保留在当前工作目录中 1git rm --cached [file_name] 移动文件1git mv file_from file_to 3. 查看提交历史1git log 12345678git log -p -2 # -p 显示每次提交的内容差异，-2 仅显示最近两次提交git log --stat # 查看提交的简略的统计信息git log --oneline # 将每个提交放在一行显示git log --shortgit log --fullgit log --fullergit log --pretty=onlinegit log --pretty=format:\"%h - %an, %ar : %s\" --graph # 定制要显示的记录格式 git log 常用选项 选项 说明 -p 按补丁格式显示每个更新之间的差异 –stat 显示每次更新的文件修改统计信息。 –shortstat 只显示 –stat 中最后的行数修改添加移除统计。 –name-only 仅在提交信息后显示已修改的文件清单。 –name-status 显示新增、修改、删除的文件清单。 –abbrev-commit 仅显示 SHA-1 的前几个字符，而非所有的 40 个字符。 –relative-date 使用较短的相对时间显示（比如，“2 weeks ago”）。 –graph 显示 ASCII 图形表示的分支合并历史。 –pretty 使用其他格式显示历史提交信息。可用的选项包括 oneline，short，full，fuller 和 format（后跟指定格式）。 git log --pretty=format 常用的选项 选项 说明 %H 提交对象（commit）的完整哈希字串 %h 提交对象的简短哈希字串 %T 树对象（tree）的完整哈希字串 %t 树对象的简短哈希字串 %P 父对象（parent）的完整哈希字串 %p 父对象的简短哈希字串 %an 作者（author）的名字 %ae 作者的电子邮件地址 %ad 作者修订日期（可以用 –date= 选项定制格式） %ar 作者修订日期，按多久以前的方式显示 %cn 提交者（committer）的名字 %ce 提交者的电子邮件地址 %cd 提交日期 %cr 提交日期，按多久以前的方式显示 %s 提交说明 限制输出长度1git log --since=2.weeks 限制 git log 输出的选项 选项 说明 -(n) 仅显示最近的 n 条提交 –since, –after 仅显示指定时间之后的提交 –until, –before 仅显示指定时间之前的提交 –author 仅显示指定作者相关的提交 –committer 仅显示指定提交者相关的提交 –grep 仅显示含指定关键字的提交 -S 仅显示添加或移除了某个关键字的提交 4. 撤消操作1git commit --amend 取消暂存的文件12# git reset HEAD &lt;file&gt; ...git reset HEAD CONTRIBUTING.md 撤消对文件的修改12# git checkout -- &lt;file&gt;git checkout -- CONTRIBUTING.md 5. 远程仓库的使用12345git clone https://github.com/schacon/ticgitgit remotegit remote -vgit remote add pb https://github.com/paulboone/ticgitgit fetch pb 从远程仓库中抓取与拉取1git fetch [remote-name] 推送到远程仓库1git push origin master 查看远程仓库12# git remote show [remote-name]git remote show origin 远程仓库的移除与重命名12git remote rename pb paulgit remote rm paul 6. 打标签列出标签12git taggit tag -l 'v1.8.5*' 创建标签附注标签123git tag -a v1.4 -m 'my version 1.4'git taggit show v1.4 # 查看标签信息与对应的提交信息 轻量标签12git tag v1.4-lwgit tag 后期打标签12git log --pretty=onelinegit tag -a v1.2 &lt;部分校验和&gt; # git tag -a v1.2 9fceb02 共享标签12git push origin v1.5git push origin --tags # 一次性推送全部标签 检出标签12# 使用 git checkout -b [branchname] [tagname] 在特定的标签上创建一个新分支git checkout -b version2 v2.0.0 7. Git 别名12345678git config --global alias.co checkoutgit config --global alias.br branchgit config --global alias.ci commitgit config --global alias.st statusgit config --global alias.unstage 'reset HEAD --'git config --global alias.last 'log -1 HEAD'# 执行外部命令，在命令前面加入 ! 符号git config --global alias.visual '!gitk'","categories":[{"name":"tools","slug":"tools","permalink":"http://yoursite.com/categories/tools/"}],"tags":[{"name":"git","slug":"git","permalink":"http://yoursite.com/tags/git/"}]},{"title":"Prometheus + Grafana","slug":"promethues","date":"2019-02-27T11:59:14.000Z","updated":"2019-07-23T07:16:50.815Z","comments":true,"path":"2019/02/27/promethues/","link":"","permalink":"http://yoursite.com/2019/02/27/promethues/","excerpt":"","text":"安装 GO12[root@master ~]# yum -y install go[root@mysqlnode05 go]# go version 安装 prometheus12345[root@master ~]# tar -zxvf prometheus-2.7.1.linux-amd64.tar.gz[root@master ~]# mv prometheus-2.7.1.linux-amd64 /appdata/prometheus[root@master ~]# cd /appdata/prometheus/# 修改prometheus.yml文件，配置targets其中的IP和端口则是对应的exporter的监听端口[root@master ~]# vim prometheus.yml 12345678910111213141516171819202122232425262728293031323334353637global: scrape_interval: 15s # Set the scrape interval to every 15 seconds. Default is every 1 minute. evaluation_interval: 15s # Evaluate rules every 15 seconds. The default is every 1 minute. # scrape_timeout is set to the global default (10s).alerting: alertmanagers: - static_configs: - targets: # - alertmanager:9093rule_files: # - \"first_rules.yml\" # - \"second_rules.yml\"scrape_configs: # The job name is added as a label `job=&lt;job_name&gt;` to any timeseries scraped from this config. - job_name: 'prometheus' static_configs: - targets: ['192.168.41.131:9090'] - job_name: 'master' static_configs: - targets: ['192.168.41.131:9100'] labels: instance: master - job_name: 'slave' static_configs: - targets: ['192.168.41.132:9100'] labels: instance: slave - job_name: 'mysql-master' static_configs: - targets: ['192.168.41.131:9104'] labels: instance: master - job_name: 'mysql-slave' static_configs: - targets: ['192.168.41.132:9104'] labels: instance: slave 12# 启动并通过web访问[root@master ~]# /appdata/prometheus/prometheus --config.file /appdata/prometheus/prometheus.yml &gt;&gt; /appdata/prometheus/prometheus.log 2&gt;&amp;1 &amp; 安装 mysqld_exporter123456789[root@master ~]# tar -zxvf mysqld_exporter-0.11.0.linux-amd64.tar.gz[root@master ~]# cp mysqld_exporter-0.11.0.linux-amd64/mysqld_exporter /appdata/prometheus/[root@master ~]# mysql -uroot -p# 创建专用用户mysql&gt; create user 'prometheus'@'%' identified by 'xxxxxx';mysql&gt; grant REPLICATION CLIENT,PROCESS,SELECT ON *.* TO 'prometheus'@'%';mysql&gt; flush privileges;# 创建exporter配置文件[root@master ~]# vim /appdata/prometheus/.my.cnf 123[client]user=mysql_promepassword=Aa123456789 12# 启动mysqld_exporter[root@master ~]# /appdata/prometheus/mysqld_exporter --config.my-cnf /appdata/prometheus/.my.cnf &gt;&gt; /appdata/prometheus/mysqld_exporter.log 2&gt;&amp;1 &amp; 安装 node_exporter1234[root@master ~]# tar -zxvf node_exporter-0.17.0.linux-amd64.tar.gz[root@master ~]# cp node_exporter-0.17.0.linux-amd64/node_exporter /appdata/prometheus/# 启动node_exporter[root@master ~]# /appdata/prometheus/node_exporter &gt;&gt; /appdata/prometheus/node_exporter.log 2&gt;&amp;1 &amp; 查看 target status浏览器访问 http://192.168.31.131:9090 安装 grafana12345[root@master ~]# wget https://dl.grafana.com/oss/release/grafana-6.0.0-1.x86_64.rpm [root@master ~]# yum -y install grafana-6.0.0-1.x86_64.rpm# 启动grafana[root@master ~]# systemctl enable grafana-server[root@master ~]# systemctl start grafana-server 添加数据源浏览器访问 http://192.168.31.131:3000","categories":[{"name":"monitor","slug":"monitor","permalink":"http://yoursite.com/categories/monitor/"}],"tags":[{"name":"linux","slug":"linux","permalink":"http://yoursite.com/tags/linux/"},{"name":"prometheus","slug":"prometheus","permalink":"http://yoursite.com/tags/prometheus/"},{"name":"grafana","slug":"grafana","permalink":"http://yoursite.com/tags/grafana/"}]},{"title":"MySQL 安装指南","slug":"mysql","date":"2019-02-17T16:00:00.000Z","updated":"2019-07-23T07:16:33.687Z","comments":true,"path":"2019/02/18/mysql/","link":"","permalink":"http://yoursite.com/2019/02/18/mysql/","excerpt":"","text":"1. 安装并初始化数据库1234567891011121314[root@master ~]# lsmysql-8.0.15-linux-glibc2.12-x86_64.tar.xz[root@master ~]# tar -Jxf mysql-8.0.15-linux-glibc2.12-x86_64.tar.xz[root@master ~]# lsmysql-8.0.15-linux-glibc2.12-x86_64 mysql-8.0.15-linux-glibc2.12-x86_64.tar.xz[root@master ~]# mkdir /appdata [root@master ~]# mv mysql-8.0.15-linux-glibc2.12-x86_64 /appdata/mysql[root@master ~]# cd /appdata/mysql/bin[root@master bin]# ./mysqld --verbose --help[root@master bin]# ./mysqld --initialize --user=mysql2019-02-17T13:24:47.271942Z 0 [Warning] [MY-011070] [Server] 'Disabling symbolic links using --skip-symbolic-links (or equivalent) is the default. Consider not using this option as it' is deprecated and will be removed in a future release.2019-02-17T13:24:47.272022Z 0 [System] [MY-013169] [Server] /appdata/mysql/bin/mysqld (mysqld 8.0.15) initializing of server in progress as process 95172019-02-17T13:24:49.230753Z 5 [Note] [MY-010454] [Server] A temporary password is generated for root@localhost: fYd00.&lt;Ucx:02019-02-17T13:24:50.553995Z 0 [System] [MY-013170] [Server] /appdata/mysql/bin/mysqld (mysqld 8.0.15) initializing of server has completed 2. 编辑自定义配置文件1[root@master ~]# vim /etc/my.cnf 1234567891011121314151617[mysqld]port=3306basedir=/appdata/mysqldatadir=/appdata/mysql/datasocket=/appdata/mysql/data/mysql.socklog-bin=mysql-binserver-id=1binlog_format=MIXEDgtid_mode = onenforce_gtid_consistency = 1log_slave_updates = 1max_allowed_packet = 128Minteractive_timeout = 28800000wait_timeout = 28800000[client]socket=/appdata/mysql/data/mysql.sock 3. 启动MySQL12[root@master ~]# cp /appdata/mysql/support-files/mysql.server /etc/init.d/[root@master ~]# vim /etc/init.d/mysql.server 12basedir=/appdata/mysqldatadir=/appdata/mysql/data 1[root@master ~]# /etc/init.d/mysql.server start 4. 设置主从同步1[root@master ~]# mysql -uroot -pfYd00.&lt;Ucx:0 12345678910111213141516171819202122232425262728293031323334353637383940mysql&gt; ALTER USER root@'localhost' IDENTIFIED BY 'Abc123';Query OK, 0 rows affected (0.04 sec)mysql&gt; CREATE USER replication@'%' IDENTIFIED WITH 'mysql_native_password' BY 'replication';Query OK, 0 rows affected (0.04 sec)mysql&gt; grant replication slave on *.* to replication@'%';Query OK, 0 rows affected (0.00 sec)mysql&gt; ALTER TABLE mysql.slave_master_info ENGINE=InnoDB;Query OK, 0 rows affected (0.07 sec)Records: 0 Duplicates: 0 Warnings: 0mysql&gt; ALTER TABLE mysql.slave_relay_log_info ENGINE=InnoDB;Query OK, 0 rows affected (0.01 sec)Records: 0 Duplicates: 0 Warnings: 0mysql&gt; reset slave;Query OK, 0 rows affected (0.01 sec)mysql&gt; CHANGE MASTER TO MASTER_HOST=\"slave.example.com\",MASTER_USER='replication',MASTER_PASSWORD=\"replication\",MASTER_AUTO_POSITION=1;Query OK, 0 rows affected, 2 warnings (0.01 sec)mysql&gt; start slave;Query OK, 0 rows affected (0.01 sec)mysql&gt; show slave status\\G;*************************** 1. row *************************** Slave_IO_State: Waiting for master to send event Master_Host: slave.example.com Master_User: replication Master_Port: 3306 Connect_Retry: 60 Master_Log_File: mysql-bin.000015 Read_Master_Log_Pos: 1567 Relay_Log_File: master-relay-bin.000003 Relay_Log_Pos: 456 Relay_Master_Log_File: mysql-bin.000015 Slave_IO_Running: Yes Slave_SQL_Running: Yes 5. 问题处理 Error_code: MY-002061 不兼容的变化： 在caching_sha2_password和 sha256_password认证插件提供比更安全的密码加密 mysql_native_password插件，并 caching_sha2_password提供了比更好的性能sha256_password。由于这些优越的安全性和性能特性 caching_sha2_password，它现在是首选的身份验证插件，而且也是默认的身份验证插件而不是 mysql_native_password。此更改会影响服务器和libmysqlclient客户端库： 对于服务器，default_authentication_plugin 系统变量的默认值 从更改 mysql_native_password为 caching_sha2_password。 该libmysqlclient库将其 caching_sha2_password视为默认的身份验证插件而不是 mysql_native_password。 此更改仅影响用于创建新MySQL帐户的身份验证插件。对于已升级安装中已存在的帐户，其身份验证插件保持不变。 使用经过身份验证的帐户的客户端 caching_sha2_password必须使用安全连接（使用TCP使用TLS / SSL凭据，Unix套接字文件或共享内存制作），或使用RSA密钥对支持密码交换的未加密连接。此安全要求不适用 mysql_native_passsword，因此交换机 caching_sha2_password可能需要其他配置（请参阅 缓存SHA-2可插入身份验证）。但是，默认情况下，MySQL 8.0中的客户端连接更喜欢使用TLS / SSL，因此已满足该首选项的客户端可能不需要其他配置。 因为caching_sha2_password现在也是libmysqlclient客户端库中的默认身份验证插件，所以 身份验证需要在客户端/服务器协议中进行额外的往返，以便从MySQL 8.0客户端连接到使用mysql_native_password（以前的默认身份验证插件）的帐户 ，除非调用客户端程序一个 –default-auth=mysql_native_password 选择。 不兼容：尚未更新的客户端和连接器 caching_sha2_password 无法连接到通过身份验证的帐户，caching_sha2_password 因为他们无法将此插件识别为有效。要解决此问题，请libmysqlclient从MySQL 8.0.4或更高版本重新链接客户端 ，或获取可识别的更新连接器 caching_sha2_password。 不兼容：尚未更新的客户端和连接器 caching_sha2_password可能无法连接到配置caching_sha2_password为默认身份验证插件的MySQL 8.0服务器 ，甚至使用未通过身份验证的帐户caching_sha2_password。出现此问题的原因是服务器为客户端指定其默认身份验证插件的名称。如果客户端或连接器基于未正常处理无法识别的默认身份验证插件的客户端/服务器协议实现，则可能会失败并显示错误。 ERROR 1872 (HY000): Slave failed to initialize relay log info structure from the repository","categories":[{"name":"database","slug":"database","permalink":"http://yoursite.com/categories/database/"}],"tags":[{"name":"mysql","slug":"mysql","permalink":"http://yoursite.com/tags/mysql/"},{"name":"replication","slug":"replication","permalink":"http://yoursite.com/tags/replication/"}]},{"title":"Kubernetes 离线安装","slug":"k8s","date":"2019-02-06T17:31:26.000Z","updated":"2019-07-23T07:16:12.800Z","comments":true,"path":"2019/02/07/k8s/","link":"","permalink":"http://yoursite.com/2019/02/07/k8s/","excerpt":"","text":"123456789101112131415161718192021cat /etc/hosts192.168.61.11 node1192.168.61.12 node2systemctl stop firewalldsystemctl disable firewalldsetenforce 0vim /etc/selinux/configSELINUX=disabledvim /etc/sysctl.d/k8s.confnet.bridge.bridge-nf-call-ip6tables = 1net.bridge.bridge-nf-call-iptables = 1net.ipv4.ip_forward = 1modprobe br_netfiltersysctl -p /etc/sysctl.d/k8s.conf kube-proxy开启ipvs的前置条件123456789101112cat &gt; /etc/sysconfig/modules/ipvs.modules &lt;&lt;EOF#!/bin/bashmodprobe -- ip_vsmodprobe -- ip_vs_rrmodprobe -- ip_vs_wrrmodprobe -- ip_vs_shmodprobe -- nf_conntrack_ipv4EOFchmod 755 /etc/sysconfig/modules/ipvs.modules &amp;&amp; bash /etc/sysconfig/modules/ipvs.modules &amp;&amp; lsmod | grep -e ip_vs -e nf_conntrack_ipv4# 查看是否已经正确加载所需的内核模块lsmod | grep -e ip_vs -e nf_conntrack_ipv4 安装Docker123456789101112131415sudo yum install -y yum-utils device-mapper-persistent-data lvm2# Step 2: 添加软件源信息sudo yum-config-manager --add-repo http://mirrors.aliyun.com/docker-ce/linux/centos/docker-ce.repo# Step 3: 更新并安装 Docker-CEsudo yum makecache fastyum list docker-ce.x86_64 --showduplicates |sort -ryum makecache fastyum install -y --setopt=obsoletes=0 \\ docker-ce-18.06.1.ce-3.el7systemctl start dockersystemctl enable docker 1iptables -nvL 安装kubeadm和kubelet123456789101112cat &lt;&lt;EOF &gt; /etc/yum.repos.d/kubernetes.repo[kubernetes]name=Kubernetesbaseurl=https://mirrors.aliyun.com/kubernetes/yum/repos/kubernetes-el7-x86_64/enabled=1gpgcheck=1repo_gpgcheck=1gpgkey=https://mirrors.aliyun.com/kubernetes/yum/doc/yum-key.gpg https://mirrors.aliyun.com/kubernetes/yum/doc/rpm-package-key.gpgEOFyum install -y kubelet kubeadm kubectlsystemctl enable kubelet &amp;&amp; systemctl start kubelet 1234567kubelet –helpcat /etc/systemd/system/kubelet.service.d/10-kubeadm.confvim /etc/sysconfig/kubeletKUBELET_EXTRA_ARGS=--fail-swap-on=false 使用kubeadm init初始化集群12345678910111213141516171819202122232425262728293031323334353637kubeadm config images list#!/bin/bashimages=(kube-apiserver:v1.13.3 kube-controller-manager:v1.13.3 kube-scheduler:v1.13.3 kube-proxy:v1.13.3 pause:3.1 etcd:3.2.24)for imageName in $&#123;images[@]&#125; ; do docker pull mirrorgooglecontainers/$imageName docker tag mirrorgooglecontainers/$imageName k8s.gcr.io/$imageName docker rmi mirrorgooglecontainers/$imageNamedone docker pull coredns/coredns:1.2.6 docker tag coredns/coredns:1.2.6 k8s.gcr.io/coredns:1.2.6 docker rmi coredns/coredns:1.2.6kubeadm init \\ --kubernetes-version=v1.13.0 \\ --pod-network-cidr=10.244.0.0/16 \\ --apiserver-advertise-address=192.168.41.132 \\ --ignore-preflight-errors=Swap# running with swap on is not supported. Please disable swap# 添加--ignore-preflight-errors=Swap参数忽略这个错误mkdir -p $HOME/.kube sudo cp -i /etc/kubernetes/admin.conf $HOME/.kube/config sudo chown $(id -u):$(id -g) $HOME/.kube/configkubeadm join 192.168.41.132:6443 --token e4xr2p.xvfc3dr6a4dvz8se --discovery-token-ca-cert-hash sha256:7f99258581c9118551ec500b61bf3d732ed6e31799e5074fc5f75b784633410akubectl get cs# 集群初始化如果遇到问题，可以使用下面的命令进行清理kubeadm reset 安装Pod Network1234mkdir -p ~/k8s/cd ~/k8swget https://raw.githubusercontent.com/coreos/flannel/master/Documentation/kube-flannel.ymlkubectl apply -f kube-flannel.yml","categories":[{"name":"linux","slug":"linux","permalink":"http://yoursite.com/categories/linux/"}],"tags":[{"name":"linux","slug":"linux","permalink":"http://yoursite.com/tags/linux/"},{"name":"docker","slug":"docker","permalink":"http://yoursite.com/tags/docker/"},{"name":"Kubernetes","slug":"Kubernetes","permalink":"http://yoursite.com/tags/Kubernetes/"}]},{"title":"MySQL 组复制","slug":"mgr","date":"2019-01-30T04:24:39.000Z","updated":"2019-07-23T07:16:27.273Z","comments":true,"path":"2019/01/30/mgr/","link":"","permalink":"http://yoursite.com/2019/01/30/mgr/","excerpt":"","text":"1. 部署组复制实例假定MySQL Server已下载并解压缩到名为的目录中mysql-8.0。以下过程使用一台物理计算机，因此每个MySQL服务器实例都需要该实例的特定数据目录。在名为的目录中创建数据目录data 并初始化每个目录。 1234mkdir datamysql-8.0/bin/mysqld --initialize-insecure --basedir=$PWD/mysql-8.0 --datadir=$PWD/data/s1mysql-8.0/bin/mysqld --initialize-insecure --basedir=$PWD/mysql-8.0 --datadir=$PWD/data/s2mysql-8.0/bin/mysqld --initialize-insecure --basedir=$PWD/mysql-8.0 --datadir=$PWD/data/s3 里面data/s1，data/s2， data/s3是一个初始化的数据目录，包含了MySQL系统数据库和相关表等等 –initialize-insecure在生产环境中使用，它仅用于简化教程。 2. 配置组复制实例组Replication Server设置要安装和使用组复制插件，必须正确配置MySQL Server实例。建议将配置存储在实例的配置文件中。以下是组中第一个实例的配置，在此过程中称为s1。以下部分显示了示例服务器配置。 12345678[mysqld]# server configurationdatadir=&lt;full_path_to_data&gt;/data/s1basedir=&lt;full_path_to_bin&gt;/mysql-8.0/port=24801socket=&lt;full_path_to_sock_dir&gt;/s1.sock 这些设置将MySQL服务器配置为使用先前创建的数据目录以及服务器应打开的端口并开始侦听传入连接。 使用非默认端口24801是因为在本教程中，三个服务器实例使用相同的主机名。在具有三台不同机器的设置中，这不是必需的。 组复制需要成员之间的网络连接，这意味着每个成员必须能够解析所有其他成员的网络地址。例如，在本教程中，所有三个实例都在一台机器上运行，因此为了确保成员可以相互联系，您可以在选项文件中添加一行，例如 report_host=127.0.0.1。 复制框架以下设置根据MySQL组复制要求配置复制。 1234server_id=1gtid_mode=ONenforce_gtid_consistency=ONbinlog_checksum=NONE 这些设置将服务器配置为使用唯一标识符编号1，以启用全局事务标识符，以允许仅执行可使用GTID安全记录的语句，以及禁用写入写入二进制日志的事件的校验和。 如果您使用的是早于8.0.3的MySQL版本，其中默认值已针对复制进行了改进，则需要将这些行添加到成员的选项文件中。 12345log_bin=binloglog_slave_updates=ONbinlog_format=ROWmaster_info_repository=TABLErelay_log_info_repository=TABLE 这些设置指示服务器打开二进制日志记录，使用基于行的格式，将复制元数据存储在系统表而不是文件中，并禁用二进制日志事件校验和。有关更多详细信息，请参见 第18.8.1节“组复制要求”。 组复制设置此时，该my.cnf文件确保配置服务器并指示在给定配置下实例化复制基础结构。以下部分配置服务器的“组复制”设置。 123456transaction_write_set_extraction=XXHASH64group_replication_group_name=&quot;aaaaaaaa-aaaa-aaaa-aaaa-aaaaaaaaaaaa&quot;group_replication_start_on_boot=offgroup_replication_local_address= &quot;127.0.0.1:24901&quot;group_replication_group_seeds= &quot;127.0.0.1:24901,127.0.0.1:24902,127.0.0.1:24903&quot;group_replication_bootstrap_group=off 配置 transaction_write_set_extraction 指示服务器对于每个事务，它必须收集写集并使用XXHASH64散列算法将其编码为散列。从MySQL 8.0.2开始，此设置是默认设置，因此可以省略此行。 配置 group_replication_group_name 告诉插件它正在加入或创建的组被命名为”aaaaaaaa-aaaa-aaaa-aaaa-aaaaaaaaaaaa”，group_replication_group_name的值 必须是有效的UUID。在二进制日志中为组复制事件设置GTID时，将在内部使用此UUID。使用SELECT UUID()生成一个UUID。 配置 group_replication_start_on_boot 指示插件在服务器启动时不自动启动操作。这在设置组复制时很重要，因为它确保您可以在手动启动插件之前配置服务器。配置成员后，您可以设置 group_replication_start_on_boot 为on，以便在服务器引导时自动启动Group Replication。 配置 group_replication_local_address 告诉插件使用网络地址127.0.0.1和端口24901与组中的其他成员进行内部通信。 组复制将此地址用于涉及组通信引擎（XCom，Paxos变体）的远程实例的内部成员到成员连接。此地址必须与用于SQL的主机名和端口不同，并且不得用于客户端应用程序。在运行组复制时，必须为组成员之间的内部通信保留它。 配置的网络地址 group_replication_local_address 必须可由所有组成员解析。例如，如果每个服务器实例位于具有固定网络地址的其他计算机上，则可以使用计算机的IP地址，例如10.0.0.1。如果使用主机名，则必须使用完全限定名称，并确保它可以通过DNS解析，并且配置正确 /etc/hosts文件或其他名称解析过程。从MySQL 8.0.14开始，可以使用IPv6地址（或解析它们的主机名）以及IPv4地址。组可以包含使用IPv6的成员和使用IPv4的成员的混合。 建议的端口 group_replication_local_address 是33061。在本教程中，我们使用在一台计算机上运行的三个服务器实例，因此端口24901到24903用于内部通信网络地址。 group_replication_local_address Group Replication使用它作为复制组中组成员的唯一标识符。只要主机名或IP地址都不同，您就可以为复制组的所有成员使用相同的端口，并且如本教程所示，只要具有相同的主机名或IP地址，就可以使用相同的主机名或IP地址。港口都不一样。 配置 group_replication_group_seeds 设置组成员的主机名和端口，新成员使用它们建立与组的连接。这些成员称为种子成员。建立连接后，将列出组成员身份信息 performance_schema.replication_group_members。通常， group_replication_group_seeds 列表包含hostname:port每个组成员的列表 group_replication_local_address，但这不是强制性的，可以选择组成员的子集作为种子。 该hostname:port列在 group_replication_group_seeds 是种子构件的内部网络地址，由被配置 group_replication_local_address ，而不是SQL hostname:port用于客户端连接，并且例如在显示 performance_schema.replication_group_members 表中。 启动该组的服务器不使用此选项，因为它是初始服务器，因此，它负责引导组。换句话说，引导该组的服务器上的任何现有数据都是用作下一个加入成员的数据。第二个服务器连接要求组中唯一的成员加入，第二个服务器上的任何缺失数据都从引导成员上的施主数据中复制，然后组扩展。加入的第三个服务器可以要求这两个服务器中的任何一个加入，数据被同步到新成员，然后该组再次扩展。 在同时加入多个服务器时，请确保它们指向已在该组中的种子成员。不要使用也加入该组的成员作为种子，因为他们在联系时可能尚未加入该组。 最好首先启动引导程序成员，然后让它创建组。然后使其成为正在加入的其余成员的种子成员。这确保了在连接其余成员时形成的组。 不支持创建组并同时加入多个成员。它可能有效，但可能是操作竞争，然后加入该组的行为最终会出错或超时。 加入成员必须使用种子成员在group_replication_group_seeds 选项中通告的相同协议（IPv4或IPv6）与种子成员通信 。出于组复制的IP地址白名单的目的，种子成员上的白名单必须包含种子成员提供的协议的加入成员的IP地址，或者解析为该协议的地址的主机名。除了加入成员之外，还必须设置此地址或主机名并列入白名单 group_replication_local_address 如果该地址的协议与种子成员的通告协议不匹配。如果加入成员没有适当协议的白名单地址，则拒绝其连接尝试。有关更多信息，请参见 第18.5.1节“IP地址白名单”。 配置 group_replication_bootstrap_group 指示插件是否引导组。 此选项只能在任何时候在一个服务器实例上使用，通常是第一次引导组时（或者在整个组关闭并重新备份的情况下）。如果多次引导组，例如当多个服务器实例设置了此选项时，则可以创建一个人工分裂脑情景，其中存在两个具有相同名称的不同组。在第一个服务器实例联机后禁用此选项。组中所有服务器的配置非常相似。您需要更改有关每个服务器的细节（例如server_id， datadir， group_replication_local_address）。本教程稍后将对此进行说明。 3. 用户凭证组复制使用异步复制协议来实现 分布式恢复过程依赖于名为的复制通道group_replication_recovery，该通道用于将来自供体成员的事务转移到加入该组的成员。因此，您需要设置具有正确权限的复制用户，以便组复制可以建立直接的成员到成员恢复复制通道。 使用选项文件启动服务器： 1mysql-8.0/bin/mysqld --defaults-file=data/s1/s1.cnf 使用该REPLICATION-SLAVE权限创建MySQL用户 。可以在二进制日志中捕获此过程，然后您可以依靠分布式恢复来复制用于创建用户的语句。或者，您可以禁用二进制日志记录，然后在每个成员上手动创建用户，例如，如果要避免将更改传播到其他服务器实例。要禁用二进制日志记录，请连接到服务器s1并发出以下语句： 1mysql&gt; SET SQL_LOG_BIN=0; 在以下示例中rpl_user，将password显示具有密码 的用户 。配置服务器时，请使用合适的用户名和密码。 123mysql&gt; CREATE USER rpl_user@&apos;%&apos; IDENTIFIED BY &apos;password&apos;;mysql&gt; GRANT REPLICATION SLAVE ON *.* TO rpl_user@&apos;%&apos;;mysql&gt; FLUSH PRIVILEGES; 如果禁用了二进制日志记录，则在创建用户后再次启用它。 1mysql&gt; SET SQL_LOG_BIN=1; 配置用户后，使用该 CHANGE MASTER TO语句将服务器配置为group_replication_recovery在下次需要从另一个成员恢复其状态时使用复制通道的给定凭据 。发出以下，替换 rpl_user和 password与创建用户时使用的值。 12mysql&gt; CHANGE MASTER TO MASTER_USER=&apos;rpl_user&apos;, MASTER_PASSWORD=&apos;password&apos; \\\\ FOR CHANNEL &apos;group_replication_recovery&apos;; 分布式恢复是加入组的服务器采取的第一步，并且没有与组成员相同的事务集。如果没有为group_replication_recovery 复制通道正确设置这些凭据，并且rpl_user如图所示，则服务器无法连接到供体成员并运行分布式恢复过程以与其他组成员同步，因此最终无法加入该组。 同样，如果服务器无法通过服务器正确识别其他成员，hostname则恢复过程可能会失败。建议运行MySQL的操作系统具有正确配置的唯一 hostname，使用DNS或本地设置。这hostname可以Member_host在performance_schema.replication_group_members 表格的列中 进行验证 。如果多个组成员外部化hostname操作系统的默认 设置，则成员可能无法解析为正确的成员地址而无法加入该组。在这种情况下，使用report_host配置hostname由每个服务器外部化的唯一。 使用组复制和缓存SHA-2用户凭据插件默认情况下，在MySQL 8中创建的用户使用 缓存SHA-2可插入身份验证。如果rpl_user您配置分布式恢复使用缓存SHA-2认证插件并没有使用安全套接字层支持（SSL） 的group_replication_recovery 复制通道，RSA密钥用于密码交换，创建SSL和RSA证书和密钥，您可以将rpl_user应该从组中恢复其状态的成员的公钥复制 到该组，也可以将捐赠者配置为在请求时提供公钥。 更安全的方法是将公钥复制 rpl_user到应该从捐赠者恢复组状态的成员。然后，您需要group_replication_recovery_public_key_path 在加入组的成员上配置 系统变量，并为其提供公钥的路径rpl_user。 可选地，不太安全的方法是设置 group_replication_recovery_get_public_key=ON 捐赠者，以便他们rpl_user在加入组时提供成员的公钥 。无法验证服务器的身份，因此只有group_replication_recovery_get_public_key=ON 在您确定没有服务器身份被泄露的风险时才会设置 ，例如通过中间人攻击。 4. 启动组复制配置并启动服务器s1后，安装组复制插件。连接到服务器并发出以下命令： 1INSTALL PLUGIN group_replication SONAME &apos;group_replication.so&apos;; mysql.session在加载组复制之前，用户必须存在。 MySQL 8.0.2版中添加了mysql.session。如果使用早期版本初始化数据字典，则必须运行 mysql_upgrade过程。如果未运行升级，则组复制无法以错误消息启动尝试使用用户访问服务器时出现错误：mysql.session@localhost。确保用户在服务器中，并且在服务器更新后运行了mysql_upgrade。 要检查插件是否已成功安装，请发出 SHOW PLUGINS;并检查输出。它应该显示如下： 12345678910mysql&gt; SHOW PLUGINS;+----------------------------+----------+--------------------+----------------------+-------------+| Name | Status | Type | Library | License |+----------------------------+----------+--------------------+----------------------+-------------+| binlog | ACTIVE | STORAGE ENGINE | NULL | PROPRIETARY |(...)| group_replication | ACTIVE | GROUP REPLICATION | group_replication.so | PROPRIETARY |+----------------------------+----------+--------------------+----------------------+-------------+ 要启动该组，请指示服务器s1引导该组，然后启动组复制。此引导程序应仅由单个服务器完成，该服务器启动组并且只执行一次。这就是为什么bootstrap配置选项的值未保存在配置文件中的原因。如果它保存在配置文件中，则在重新启动时，服务器会自动引导具有相同名称的第二个组。这将导致两个具有相同名称的不同组。同样的推理适用于在此选项设置为的情况下停止并重新启动插件ON。 123SET GLOBAL group_replication_bootstrap_group=ON;START GROUP_REPLICATION;SET GLOBAL group_replication_bootstrap_group=OFF; 一旦START GROUP_REPLICATION 语句返回，该集团已启动。您可以检查该组现在是否已创建，并且其中包含一个成员： 123456mysql&gt; SELECT * FROM performance_schema.replication_group_members;+---------------------------+--------------------------------------+-------------+-------------+---------------+| CHANNEL_NAME | MEMBER_ID | MEMBER_HOST | MEMBER_PORT | MEMBER_STATE |+---------------------------+--------------------------------------+-------------+-------------+---------------+| group_replication_applier | ce9be252-2b71-11e6-b8f4-00212844f856 | myhost | 24801 | ONLINE |+---------------------------+--------------------------------------+-------------+-------------+---------------+ 此表中的信息确认组中有成员具有唯一标识符 ce9be252-2b71-11e6-b8f4-00212844f856，它正在ONLINE并且正在myhost 侦听端口上的客户端连接 24801。 为了证明服务器确实在一个组中并且它能够处理负载，创建一个表并向其添加一些内容。 1234mysql&gt; CREATE DATABASE test;mysql&gt; USE test;mysql&gt; CREATE TABLE t1 (c1 INT PRIMARY KEY, c2 TEXT NOT NULL);mysql&gt; INSERT INTO t1 VALUES (1, &apos;Luis&apos;); 检查表的内容t1和二进制日志。 123456789101112131415161718192021222324252627mysql&gt; SELECT * FROM t1;+----+------+| c1 | c2 |+----+------+| 1 | Luis |+----+------+mysql&gt; SHOW BINLOG EVENTS;+---------------+-----+----------------+-----------+-------------+--------------------------------------------------------------------+| Log_name | Pos | Event_type | Server_id | End_log_pos | Info |+---------------+-----+----------------+-----------+-------------+--------------------------------------------------------------------+| binlog.000001 | 4 | Format_desc | 1 | 123 | Server ver: 8.0.2-gr080-log, Binlog ver: 4 || binlog.000001 | 123 | Previous_gtids | 1 | 150 | || binlog.000001 | 150 | Gtid | 1 | 211 | SET @@SESSION.GTID_NEXT= &apos;aaaaaaaa-aaaa-aaaa-aaaa-aaaaaaaaaaaa:1&apos; || binlog.000001 | 211 | Query | 1 | 270 | BEGIN || binlog.000001 | 270 | View_change | 1 | 369 | view_id=14724817264259180:1 || binlog.000001 | 369 | Query | 1 | 434 | COMMIT || binlog.000001 | 434 | Gtid | 1 | 495 | SET @@SESSION.GTID_NEXT= &apos;aaaaaaaa-aaaa-aaaa-aaaa-aaaaaaaaaaaa:2&apos; || binlog.000001 | 495 | Query | 1 | 585 | CREATE DATABASE test || binlog.000001 | 585 | Gtid | 1 | 646 | SET @@SESSION.GTID_NEXT= &apos;aaaaaaaa-aaaa-aaaa-aaaa-aaaaaaaaaaaa:3&apos; || binlog.000001 | 646 | Query | 1 | 770 | use `test`; CREATE TABLE t1 (c1 INT PRIMARY KEY, c2 TEXT NOT NULL) || binlog.000001 | 770 | Gtid | 1 | 831 | SET @@SESSION.GTID_NEXT= &apos;aaaaaaaa-aaaa-aaaa-aaaa-aaaaaaaaaaaa:4&apos; || binlog.000001 | 831 | Query | 1 | 899 | BEGIN || binlog.000001 | 899 | Table_map | 1 | 942 | table_id: 108 (test.t1) || binlog.000001 | 942 | Write_rows | 1 | 984 | table_id: 108 flags: STMT_END_F || binlog.000001 | 984 | Xid | 1 | 1011 | COMMIT /* xid=38 */ |+---------------+-----+----------------+-----------+-------------+--------------------------------------------------------------------+ 如上所示，创建了数据库和表对象，并将相应的DDL语句写入二进制日志。此外，数据已插入表中并写入二进制日志。当组成长并且新成员尝试赶上并联机时执行分布式恢复时，下一节将说明二进制日志条目的重要性。 5. 向组添加实例此时，该组中有一个成员服务器s1，其中包含一些数据。现在是时候通过添加先前配置的其他两个服务器来扩展组。 添加第二个实例为了添加第二个实例，服务器s2，首先为它创建配置文件。配置类似于用于服务器s1的配置，除了诸如数据目录的位置，s2将要监听的端口或其之外的配置 server_id。这些不同的行在下面的列表中突出显示。 1234567891011121314151617181920212223242526[mysqld]# server configurationdatadir=&lt;full_path_to_data&gt;/data/s2basedir=&lt;full_path_to_bin&gt;/mysql-8.0/port=24802socket=&lt;full_path_to_sock_dir&gt;/s2.sock## Replication configuration parameters#server_id=2gtid_mode=ONenforce_gtid_consistency=ONbinlog_checksum=NONE## Group Replication configuration#transaction_write_set_extraction=XXHASH64group_replication_group_name=&quot;aaaaaaaa-aaaa-aaaa-aaaa-aaaaaaaaaaaa&quot;group_replication_start_on_boot=offgroup_replication_local_address= &quot;127.0.0.1:24902&quot;group_replication_group_seeds= &quot;127.0.0.1:24901,127.0.0.1:24902,127.0.0.1:24903&quot;group_replication_bootstrap_group= off 与服务器s1的过程类似，使用选项文件启动服务器。 1mysql-8.0/bin/mysqld --defaults-file=data/s2/s2.cnf 然后按如下方式配置恢复凭据。这些命令与设置服务器s1时使用的命令相同，因为用户在组内共享。在s2上发布以下语句。 123456SET SQL_LOG_BIN=0;CREATE USER rpl_user@&apos;%&apos; IDENTIFIED BY &apos;password&apos;;GRANT REPLICATION SLAVE ON *.* TO rpl_user@&apos;%&apos;;SET SQL_LOG_BIN=1;CHANGE MASTER TO MASTER_USER=&apos;rpl_user&apos;, MASTER_PASSWORD=&apos;password&apos; \\\\ FOR CHANNEL &apos;group_replication_recovery&apos;; 如果您使用的是缓存SHA-2身份验证插件（MySQL 8中的默认设置），请参阅 使用组复制和缓存SHA-2用户凭据插件。 安装组复制插件并开始将服务器加入组的过程。以下示例以与部署服务器s1时相同的方式安装插件。 1mysql&gt; INSTALL PLUGIN group_replication SONAME &apos;group_replication.so&apos;; 将服务器s2添加到组中。 1mysql&gt; START GROUP_REPLICATION; 与之前的步骤（与s1上执行的步骤相同）不同，此处的区别在于， 在启动组复制之前不会发出SET GLOBAL group_replication_bootstrap_group=ON;，因为该组已由服务器s1创建并引导。此时，只需将服务器s2添加到现有组中。 当组复制成功启动并且服务器加入组时，它会检查 super_read_only变量。通过super_read_only 在成员的配置文件中设置为ON，可以确保因任何原因启动组复制时出现故障的服务器不接受事务。如果服务器应将该组作为读写实例加入，例如作为单主组中的主要组或多主组的成员，则当该 super_read_only变量设置为ON时，则在加入时将其设置为OFF群组。 performance_schema.replication_group_members 再次 检查 表显示该组中现在有两个 ONLINE服务器。 1234567mysql&gt; SELECT * FROM performance_schema.replication_group_members;+---------------------------+--------------------------------------+-------------+-------------+---------------+| CHANNEL_NAME | MEMBER_ID | MEMBER_HOST | MEMBER_PORT | MEMBER_STATE |+---------------------------+--------------------------------------+-------------+-------------+---------------+| group_replication_applier | 395409e1-6dfa-11e6-970b-00212844f856 | myhost | 24801 | ONLINE || group_replication_applier | ac39f1e6-6dfa-11e6-a69d-00212844f856 | myhost | 24802 | ONLINE |+---------------------------+--------------------------------------+-------------+-------------+---------------+ 由于服务器s2也标记为ONLINE，它必须已经自动赶上服务器s1。验证它确实已与服务器s1同步，如下所示。 1234567891011121314151617181920212223242526272829303132333435363738mysql&gt; SHOW DATABASES LIKE &apos;test&apos;;+-----------------+| Database (test) |+-----------------+| test |+-----------------+mysql&gt; SELECT * FROM test.t1;+----+------+| c1 | c2 |+----+------+| 1 | Luis |+----+------+mysql&gt; SHOW BINLOG EVENTS;+---------------+------+----------------+-----------+-------------+--------------------------------------------------------------------+| Log_name | Pos | Event_type | Server_id | End_log_pos | Info |+---------------+------+----------------+-----------+-------------+--------------------------------------------------------------------+| binlog.000001 | 4 | Format_desc | 2 | 123 | Server ver: 8.0.3-log, Binlog ver: 4 || binlog.000001 | 123 | Previous_gtids | 2 | 150 | || binlog.000001 | 150 | Gtid | 1 | 211 | SET @@SESSION.GTID_NEXT= &apos;aaaaaaaa-aaaa-aaaa-aaaa-aaaaaaaaaaaa:1&apos; || binlog.000001 | 211 | Query | 1 | 270 | BEGIN || binlog.000001 | 270 | View_change | 1 | 369 | view_id=14724832985483517:1 || binlog.000001 | 369 | Query | 1 | 434 | COMMIT || binlog.000001 | 434 | Gtid | 1 | 495 | SET @@SESSION.GTID_NEXT= &apos;aaaaaaaa-aaaa-aaaa-aaaa-aaaaaaaaaaaa:2&apos; || binlog.000001 | 495 | Query | 1 | 585 | CREATE DATABASE test || binlog.000001 | 585 | Gtid | 1 | 646 | SET @@SESSION.GTID_NEXT= &apos;aaaaaaaa-aaaa-aaaa-aaaa-aaaaaaaaaaaa:3&apos; || binlog.000001 | 646 | Query | 1 | 770 | use `test`; CREATE TABLE t1 (c1 INT PRIMARY KEY, c2 TEXT NOT NULL) || binlog.000001 | 770 | Gtid | 1 | 831 | SET @@SESSION.GTID_NEXT= &apos;aaaaaaaa-aaaa-aaaa-aaaa-aaaaaaaaaaaa:4&apos; || binlog.000001 | 831 | Query | 1 | 890 | BEGIN || binlog.000001 | 890 | Table_map | 1 | 933 | table_id: 108 (test.t1) || binlog.000001 | 933 | Write_rows | 1 | 975 | table_id: 108 flags: STMT_END_F || binlog.000001 | 975 | Xid | 1 | 1002 | COMMIT /* xid=30 */ || binlog.000001 | 1002 | Gtid | 1 | 1063 | SET @@SESSION.GTID_NEXT= &apos;aaaaaaaa-aaaa-aaaa-aaaa-aaaaaaaaaaaa:5&apos; || binlog.000001 | 1063 | Query | 1 | 1122 | BEGIN || binlog.000001 | 1122 | View_change | 1 | 1261 | view_id=14724832985483517:2 || binlog.000001 | 1261 | Query | 1 | 1326 | COMMIT |+---------------+------+----------------+-----------+-------------+--------------------------------------------------------------------+ 如上所示，第二台服务器已添加到组中，并自动从服务器s1复制了更改。根据分布式恢复过程，这意味着在加入组之后并且在被声明在线之前，服务器s2已经自动连接到服务器s1并从中获取丢失的数据。换句话说，它将事务从缺少的s1的二进制日志复制到它加入组的时间点。 添加其他实例向组添加其他实例与添加第二个服务器的步骤顺序基本相同，只是必须更改配置，因为必须更改服务器s2。总结所需的命令： 创建配置文件 12345678910111213141516171819202122232425[mysqld]# server configurationdatadir=&lt;full_path_to_data&gt;/data/s3basedir=&lt;full_path_to_bin&gt;/mysql-8.0/port=24803socket=&lt;full_path_to_sock_dir&gt;/s3.sock## Replication configuration parameters#server_id=3gtid_mode=ONenforce_gtid_consistency=ONbinlog_checksum=NONE## Group Replication configuration#group_replication_group_name=&quot;aaaaaaaa-aaaa-aaaa-aaaa-aaaaaaaaaaaa&quot;group_replication_start_on_boot=offgroup_replication_local_address= &quot;127.0.0.1:24903&quot;group_replication_group_seeds= &quot;127.0.0.1:24901,127.0.0.1:24902,127.0.0.1:24903&quot;group_replication_bootstrap_group= off 启动服务器 1mysql-8.0/bin/mysqld --defaults-file=data/s3/s3.cnf 配置group_replication_recovery通道的恢复凭据。 1234567SET SQL_LOG_BIN=0;CREATE USER rpl_user@&apos;%&apos; IDENTIFIED BY &apos;password&apos;;GRANT REPLICATION SLAVE ON *.* TO rpl_user@&apos;%&apos;;FLUSH PRIVILEGES;SET SQL_LOG_BIN=1;CHANGE MASTER TO MASTER_USER=&apos;rpl_user&apos;, MASTER_PASSWORD=&apos;password&apos; \\\\FOR CHANNEL &apos;group_replication_recovery&apos;; 安装Group Replication插件并启动它。 12INSTALL PLUGIN group_replication SONAME &apos;group_replication.so&apos;;START GROUP_REPLICATION; 此时，服务器s3已启动并正在运行，已加入该组并赶上该组中的其他服务器。performance_schema.replication_group_members 再次咨询 表证实了这种情况。 12345678mysql&gt; SELECT * FROM performance_schema.replication_group_members;+---------------------------+--------------------------------------+-------------+-------------+---------------+| CHANNEL_NAME | MEMBER_ID | MEMBER_HOST | MEMBER_PORT | MEMBER_STATE |+---------------------------+--------------------------------------+-------------+-------------+---------------+| group_replication_applier | 395409e1-6dfa-11e6-970b-00212844f856 | myhost | 24801 | ONLINE || group_replication_applier | 7eb217ff-6df3-11e6-966c-00212844f856 | myhost | 24803 | ONLINE || group_replication_applier | ac39f1e6-6dfa-11e6-a69d-00212844f856 | myhost | 24802 | ONLINE |+---------------------------+--------------------------------------+-------------+-------------+---------------+ 在服务器s2或服务器s1上发出相同的查询会产生相同的结果。此外，您可以验证服务器s3是否也赶上了： 123456789101112131415161718192021222324252627282930313233343536373839404142mysql&gt; SHOW DATABASES LIKE &apos;test&apos;;+-----------------+| Database (test) |+-----------------+| test |+-----------------+mysql&gt; SELECT * FROM test.t1;+----+------+| c1 | c2 |+----+------+| 1 | Luis |+----+------+mysql&gt; SHOW BINLOG EVENTS;+---------------+------+----------------+-----------+-------------+--------------------------------------------------------------------+| Log_name | Pos | Event_type | Server_id | End_log_pos | Info |+---------------+------+----------------+-----------+-------------+--------------------------------------------------------------------+| binlog.000001 | 4 | Format_desc | 3 | 123 | Server ver: 8.0.3-log, Binlog ver: 4 || binlog.000001 | 123 | Previous_gtids | 3 | 150 | || binlog.000001 | 150 | Gtid | 1 | 211 | SET @@SESSION.GTID_NEXT= &apos;aaaaaaaa-aaaa-aaaa-aaaa-aaaaaaaaaaaa:1&apos; || binlog.000001 | 211 | Query | 1 | 270 | BEGIN || binlog.000001 | 270 | View_change | 1 | 369 | view_id=14724832985483517:1 || binlog.000001 | 369 | Query | 1 | 434 | COMMIT || binlog.000001 | 434 | Gtid | 1 | 495 | SET @@SESSION.GTID_NEXT= &apos;aaaaaaaa-aaaa-aaaa-aaaa-aaaaaaaaaaaa:2&apos; || binlog.000001 | 495 | Query | 1 | 585 | CREATE DATABASE test || binlog.000001 | 585 | Gtid | 1 | 646 | SET @@SESSION.GTID_NEXT= &apos;aaaaaaaa-aaaa-aaaa-aaaa-aaaaaaaaaaaa:3&apos; || binlog.000001 | 646 | Query | 1 | 770 | use `test`; CREATE TABLE t1 (c1 INT PRIMARY KEY, c2 TEXT NOT NULL) || binlog.000001 | 770 | Gtid | 1 | 831 | SET @@SESSION.GTID_NEXT= &apos;aaaaaaaa-aaaa-aaaa-aaaa-aaaaaaaaaaaa:4&apos; || binlog.000001 | 831 | Query | 1 | 890 | BEGIN || binlog.000001 | 890 | Table_map | 1 | 933 | table_id: 108 (test.t1) || binlog.000001 | 933 | Write_rows | 1 | 975 | table_id: 108 flags: STMT_END_F || binlog.000001 | 975 | Xid | 1 | 1002 | COMMIT /* xid=29 */ || binlog.000001 | 1002 | Gtid | 1 | 1063 | SET @@SESSION.GTID_NEXT= &apos;aaaaaaaa-aaaa-aaaa-aaaa-aaaaaaaaaaaa:5&apos; || binlog.000001 | 1063 | Query | 1 | 1122 | BEGIN || binlog.000001 | 1122 | View_change | 1 | 1261 | view_id=14724832985483517:2 || binlog.000001 | 1261 | Query | 1 | 1326 | COMMIT || binlog.000001 | 1326 | Gtid | 1 | 1387 | SET @@SESSION.GTID_NEXT= &apos;aaaaaaaa-aaaa-aaaa-aaaa-aaaaaaaaaaaa:6&apos; || binlog.000001 | 1387 | Query | 1 | 1446 | BEGIN || binlog.000001 | 1446 | View_change | 1 | 1585 | view_id=14724832985483517:3 || binlog.000001 | 1585 | Query | 1 | 1650 | COMMIT |+---------------+------+----------------+-----------+-------------+--------------------------------------------------------------------+","categories":[{"name":"database","slug":"database","permalink":"http://yoursite.com/categories/database/"}],"tags":[{"name":"linux","slug":"linux","permalink":"http://yoursite.com/tags/linux/"},{"name":"mysql","slug":"mysql","permalink":"http://yoursite.com/tags/mysql/"},{"name":"mgr","slug":"mgr","permalink":"http://yoursite.com/tags/mgr/"}]},{"title":"使用 Powerline 美化终端","slug":"powerline","date":"2019-01-28T16:00:00.000Z","updated":"2019-07-23T07:16:47.146Z","comments":true,"path":"2019/01/29/powerline/","link":"","permalink":"http://yoursite.com/2019/01/29/powerline/","excerpt":"","text":"安装 python3Ubuntu 1[root@ubuntu ~]# sudo apt install python3 python3-pip 安装 powerline1234567891011[root@ubuntu ~]# python3 -m pip install powerline-status[root@ubuntu ~]# python3 -m pip show powerline-statusName: powerline-statusVersion: 2.7Summary: The ultimate statusline/prompt utility.Home-page: https://github.com/powerline/powerlineAuthor: Kim SilkebaekkenAuthor-email: kim.silkebaekken+vim@gmail.comLicense: MITLocation: /usr/local/lib/python3.6/dist-packagesRequires: 设置 bash1[root@ubuntu ~]# vim ~/.bashrc 1234powerline-daemon -qPOWERLINE_BASH_CONTINUATION=1POWERLINE_BASH_SELECT=1. /usr/local/lib/python3.6/dist-packages/powerline/bindings/bash/powerline.sh 效果图 设置 vim1[root@ubuntu ~]# vim ~/.vimrc 123set rtp+=/usr/local/lib/python3.6/dist-packages/powerline/bindings/vim/set laststatus=2set t_Co=256 效果图","categories":[{"name":"tools","slug":"tools","permalink":"http://yoursite.com/categories/tools/"}],"tags":[{"name":"linux","slug":"linux","permalink":"http://yoursite.com/tags/linux/"},{"name":"powerline","slug":"powerline","permalink":"http://yoursite.com/tags/powerline/"}]},{"title":"MySQL 常用函数","slug":"mysql_function","date":"2019-01-14T16:00:00.000Z","updated":"2019-07-23T07:16:30.560Z","comments":true,"path":"2019/01/15/mysql_function/","link":"","permalink":"http://yoursite.com/2019/01/15/mysql_function/","excerpt":"","text":"文本处理函数 函数名 说明 left( ) 返回串左边的字符 right( ) 返回串右边的字符 length( ) 返回串的长度 locate( ) 找出串的一个子串 lower( ) 将串转换为小写 upper( ) 将串转换为大写 ltrim( ) 去掉串左边的空格 rtrim( ) 去掉串右边的空格 soundex( ) 返回串的SOUNDEX值 substring( ) 返回子串的字符 ## 日期和时间处理函数 函数名 说明 adddate( ) 增加一个日期（天、周等） addtime( ) 增加一个时间（时、分等） curdate( ) 返回当前日期 curtime( ) 返回当前时间 date( ) 返回日期时间的日期部分 datediff( ) 计算两个日期之差 date_add( ) 高度灵活的日期运算函数 date_format( ) 返回一个格式化的日期或时间串 day( ) 返回一个日期的天数部分 dayofweek( ) 对于一个日期，返回对应的星期几 hour( ) 返回一个时间的小时部分 minute( ) 返回一个时间的分钟部分 month( ) 返回一个日期的月份部分 now( ) 返回当前日期和时间 second( ) 返回一个时间的秒部分 time( ) 返回一个日期时间的时间部分 year( ) 返回一个日期的年份部分 数值处理函数 函数名 说明 abs( ) 返回一个数的绝对值 cos( ) 返回一个角度的余弦 exp( ) 返回一个数的指数值 mod( ) 返回除操作的余数 pi( ) 返回圆周率 rand( ) 返回一个随机数 sin( ) 返回一个角度的正弦 sqrt( ) 返回一个数的平方根 tan( ) 返回一个角度的正切 聚集函数 函数名 说明 avg( ) 返回某列的平均值 count( ) 返回某列的行数 max( ) 返回某列的最大值 min( ) 返回某列的最小值 sum( ) 返回某列值之和","categories":[{"name":"database","slug":"database","permalink":"http://yoursite.com/categories/database/"}],"tags":[{"name":"mysql","slug":"mysql","permalink":"http://yoursite.com/tags/mysql/"}]},{"title":"uWSGI 部署 Django 应用","slug":"uwsgi","date":"2019-01-06T16:00:00.000Z","updated":"2019-07-23T07:17:22.755Z","comments":true,"path":"2019/01/07/uwsgi/","link":"","permalink":"http://yoursite.com/2019/01/07/uwsgi/","excerpt":"","text":"demo项目的目录结构 1234567891011121314demo/├── db.sqlite3├── demo│ ├── __init__.py│ ├── __pycache__│ │ ├── __init__.cpython-36.pyc│ │ ├── settings.cpython-36.pyc│ │ ├── urls.cpython-36.pyc│ │ └── wsgi.cpython-36.pyc│ ├── settings.py│ ├── urls.py│ └── wsgi.py├── manage.py└── requirements.txt 安装相关工具和依赖12[root@uwsgi ~]# yum -y install git wget httpd vim # 安装相关工具[root@uwsgi ~]# yum -y install gcc zlib* openssl-devel # 安装编译工具和依赖库 安装 Python 环境rhel系列无法通过yum直接安装python3，需要源码编译安装 123456789101112[root@uwsgi ~]# pwd # 查看当前目录/root[root@uwsgi ~]# wget https://www.python.org/ftp/python/3.6.5/Python-3.6.5.tgz # 下载python3.6.5[root@uwsgi ~]# tar -zxvf Python-3.6.5.tgz # 解压[root@uwsgi ~]# cd Python-3.6.5[root@uwsgi Python-3.6.5]# pwd # 查看当前目录/root/Python-3.6.5[root@uwsgi Python-3.6.5]# ./configure # 编译[root@uwsgi Python-3.6.5]# make &amp;&amp; make install # 安装[root@uwsgi Python-3.6.5]# which python3 # 查看python3的路径/usr/local/bin/python3 安装 uWSGI1[root@uwsgi ~]# python3 -m pip install uwsgi 安装配置虚拟环境1234567[root@uwsgi ~]# python3 -m pip install virtualenv # 安装虚拟环境[root@uwsgi ~]# virtualenv -p /usr/local/bin/python3 /venv # 配置虚拟环境[root@uwsgi ~]# source /venv/bin/activate # 激活虚拟环境(venv) [root@uwsgi ~]# pip install -r /root/demo/requirements.txt # 安装项目依赖(venv) [root@uwsgi ~]# pip freeze # 查看依赖库是否安装(venv) [root@uwsgi ~]# deactivate # 取消激活虚拟环境[root@uwsgi ~]# 修改 ALLOW_HOSTS1[root@uwsgi ~]# vim demo/demo/settings.py # 编辑项目中的 settings.py 1ALLOWED_HOSTS = [\"192.168.41.130\",] 配置 uWSGI12[root@uwsgi ~]# mkdir -p /var/log/uwsgi # 创建 uwsgi 的日志目录[root@uwsgi ~]# vim /etc/uwsgi.ini # 创建 uwsgi.ini 配置文件 1234567891011[uwsgi]chdir=/root/demohttp=192.168.41.130:8000home=/venvmodule=demo.wsgi:applicationmaster=Truepidfile=/tmp/demo.pidmax-requests=5000daemonize=/var/log/uwsgi/demo.logenv=LANG=en_US.UTF-8buffer-size=32768 启动 uWSGI1[root@uwsgi ~]# uwsgi --init /etc/uwsgi.ini # 以 /etc/uwsgi.ini 配置启动 uwsgi 注意事项 路径 说明 /root/demo 项目路径 /usr/local/bin/python3 python3默认安装路径 /etc/uwsgi.ini uwsgi配置文件 /var/log/uwsgi/demo.log uwsgi日志文件 /venv python虚拟环境路径 未安装zlib*： 1zipimport.ZipImportError: can&apos;t decompress data; zlib not available # 编译时报错 未安装openssl、openssl-devel： 1pip is configured with locations that require TLS/SSL, however the ssl module in Python is not available # pip 安装 uwsgi 时报错 uwsgi 无法访问，日志报错： 1invalid request block size: 21573 (max 4096)...skip # 在 /etc/uwsgi.ini 中添加 buffer-size=32768","categories":[{"name":"linux","slug":"linux","permalink":"http://yoursite.com/categories/linux/"}],"tags":[{"name":"linux","slug":"linux","permalink":"http://yoursite.com/tags/linux/"},{"name":"python","slug":"python","permalink":"http://yoursite.com/tags/python/"}]},{"title":"使用 oh-my-posh 美化 PowerShell","slug":"oh-my-posh","date":"2019-01-04T16:00:00.000Z","updated":"2019-07-23T07:16:43.319Z","comments":true,"path":"2019/01/05/oh-my-posh/","link":"","permalink":"http://yoursite.com/2019/01/05/oh-my-posh/","excerpt":"","text":"英文字体是支持PowerLine的DejaVuSansMono字体，中文字体是文泉驿等宽微米黑字体），并将终端字体设置为支持PowerLine的字体。然后开始安装oh-my-posh（该步骤可能需要某种“较为稳定”的网络环境）。在管理员权限的PowerShell下执行指令 1Set-ExecutionPolicy Bypass 该指令旨在允许加载并运行任意脚本。可能会造成安全问题，但是只要有杀毒软件在就无需担心，毕竟没有人会无聊到对一个普通的计算机用户进行针对性攻击。 然后安装oh-my-posh的依赖和oh-my-posh本身 12Install-Module posh-git -Scope CurrentUserInstall-Module oh-my-posh -Scope CurrentUser 安装完成之后，可以通过 1Import-Module oh-my-posh 来尝试启用这个模组。之后就可以使用 1Set-Theme主题名 这种格式的指令来切换不同的显示风格。示例图中的主题是基于Agnoster改造的，默认主题文件位于 IT之家学院：使用oh-my-posh美化Win10 PowerShell 接下来便是在PowerShell启动时加载这个模组了。类似于Linux Bash的.bashrc，PowerShell也提供类似的Profile文件用于在启动时执行指令。输入 1Test-Path $profile 并执行，以确定profile文件是否存在。如果返回False，则应该执行： 1New-Item -path $profile -type file–force 来新建一个文件。然后去往Profile的目录（通常是你的文档下的WindowsPowerShell目录下），修改那个后缀为ps1的Profile文件，加入一行Import-Module oh-my-posh即可。 一切完成之后，PowerShell应该比原先美观了不少，而且提示符的功能更强了。基于oh-my-posh框架，还能自己编写更多的主题。","categories":[{"name":"tools","slug":"tools","permalink":"http://yoursite.com/categories/tools/"}],"tags":[{"name":"windows","slug":"windows","permalink":"http://yoursite.com/tags/windows/"},{"name":"powershell","slug":"powershell","permalink":"http://yoursite.com/tags/powershell/"}]},{"title":"jenkins 入门指南","slug":"jenkins","date":"2019-01-03T16:00:00.000Z","updated":"2019-07-23T07:16:06.219Z","comments":true,"path":"2019/01/04/jenkins/","link":"","permalink":"http://yoursite.com/2019/01/04/jenkins/","excerpt":"","text":"sudo wget -O /etc/yum.repos.d/jenkins.repo https://pkg.jenkins.io/redhat-stable/jenkins.reposudo rpm –import https://pkg.jenkins.io/redhat-stable/jenkins.io.key yum install jenkins","categories":[{"name":"linux","slug":"linux","permalink":"http://yoursite.com/categories/linux/"}],"tags":[{"name":"linux","slug":"linux","permalink":"http://yoursite.com/tags/linux/"},{"name":"jenkins","slug":"jenkins","permalink":"http://yoursite.com/tags/jenkins/"},{"name":"ci","slug":"ci","permalink":"http://yoursite.com/tags/ci/"}]},{"title":"gitlab-ce 入坑指南","slug":"gitlab","date":"2019-01-02T16:00:00.000Z","updated":"2019-07-23T07:15:42.175Z","comments":true,"path":"2019/01/03/gitlab/","link":"","permalink":"http://yoursite.com/2019/01/03/gitlab/","excerpt":"","text":"更新软件包1yum update -y 配置防火墙1[root@gitlab ~]# vim /etc/sysctl.conf 1net.ipv4.ip_forward = 1 启用并启动防火墙 12[root@gitlab ~]# systemctl enable firewalld[root@gitlab ~]# systemctl start firewalld 放通 HTTP、HTTPS 12[root@gitlab ~]# firewall-cmd --add-service=http --permanent[root@gitlab ~]# firewall-cmd --add-service=https --permanent 重载入防火墙 1[root@gitlab ~]# systemctl reload firewalld 安装 postfixGitLab 需要使用 postfix 来发送邮件。当然，也可以使用 SMTP 服务器 1[root@gitlab ~]# vim /etc/postfix/main.cf 12# inet_protocols = allinet_protocols = ipv4 启用并启动 postfix 1[root@gitlab ~]# systemctl restart postfix 配置 swap由于 GitLab 较为消耗资源，我们需要先创建交换分区，以降低物理内存的压力。在实际生产环境中，如果服务器配置够高，则不必配置交换分区。 新建 2 GB 大小的交换分区 1[root@gitlab ~]# dd if=/dev/zero of=/root/swapfile bs=1M count=2048 格式化为交换分区文件并启用 12[root@gitlab ~]# mkswap /root/swapfile[root@gitlab ~]# swapon /root/swapfile 添加自启用 1[root@gitlab ~]# vim /etc/fstab 1/root/swapfile swap swap defaults 0 0 安装 GitLab 将软件源修改为国内源 1[root@gitlab ~]# vim /etc/yum.repos.d/gitlab-ce.repo 12345[gitlab-ce]name=Gitlab CE Repositorybaseurl=https://mirrors.tuna.tsinghua.edu.cn/gitlab-ce/yum/el$releasever/gpgcheck=0enabled=1 安装 GitLab 12[root@gitlab ~]# yum makecache[root@gitlab ~]# yum install -y gitlab-ce 12345678910111213141516171819202122 *. *. *** *** ***** ***** .****** ******* ******** ******** ,,,,,,,,,***********,,,,,,,,,,,,,,,,,,,,*********,,,,,,,,,,,.,,,,,,,,,,,*******,,,,,,,,,,,, ,,,,,,,,,*****,,,,,,,,,. ,,,,,,,****,,,,,, .,,,***,,,, ,*,. _______ __ __ __ / ____(_) /_/ / ____ _/ /_ / / __/ / __/ / / __ `/ __ \\/ /_/ / / /_/ /___/ /_/ / /_/ /\\____/_/\\__/_____/\\__,_/_.___/Thank you for installing GitLab! 配置 HTTPS 证书 生成 key 文件 1[root@gitlab ~]# openssl genrsa -out \"/etc/gitlab/ssl/gitlab.example.com.key\" 输出： 1234Generating RSA private key, 2048 bit long modulus.........................................................................................................+++..............................................................+++e is 65537 (0x10001) 生成 csr 文件 1[root@gitlab ssl]# openssl req -new -key \"/etc/gitlab/ssl/gitlab.example.com.key\" -out \"/etc/gitlab/ssl/gitlab.example.com.csr\" 输出： 12345678910111213141516171819You are about to be asked to enter information that will be incorporatedinto your certificate request.What you are about to enter is what is called a Distinguished Name or a DN.There are quite a few fields but you can leave some blankFor some fields there will be a default value,If you enter &apos;.&apos;, the field will be left blank.-----Country Name (2 letter code) [XX]:cnState or Province Name (full name) []:szLocality Name (eg, city) [Default City]:szOrganization Name (eg, company) [Default Company Ltd]:exampleOrganizational Unit Name (eg, section) []:Common Name (eg, your name or your server&apos;s hostname) []:gitlab.example.comEmail Address []:admin@example.comPlease enter the following &apos;extra&apos; attributesto be sent with your certificate requestA challenge password []:passwordAn optional company name []: 生成 crt 文件 1[root@gitlab ~]# openssl x509 -req -days 365 -in \"/etc/gitlab/ssl/gitlab.example.com.csr\" -signkey \"/etc/gitlab/ssl/gitlab.example.com.key\" -out \"/etc/gitlab/ssl/gitlab.example.com.crt\" 输出： 123Signature oksubject=/C=cn/ST=sz/L=sz/O=example/CN=gitlab.example.com/emailAddress=admin@example.comGetting Private key 生成 dhparams.pem 1[root@gitlab ssl]# openssl dhparam -out /etc/gitlab/ssl/dhparams.pem 2048 初始化 GitLab 配置 GitLab 1[root@gitlab ~]# vim /etc/gitlab/gitlab.rb 12345external_url &apos;http://gitlab.example.com&apos;nginx[&apos;redirect_http_to_https&apos;] = truenginx[&apos;ssl_certificate&apos;] = &quot;/etc/gitlab/ssl/gitlab.example.com.crt&quot;nginx[&apos;ssl_certificate_key&apos;] = &quot;/etc/gitlab/ssl/gitlab.example.com.key&quot;nginx[&apos;ssl_dhparam&apos;] = &quot;/etc/gitlab/ssl/dhparams.pem&quot; 初始化 GitLab 1[root@gitlab ~]# gitlab-ctl reconfigure 修改 nginx 配置 1[root@gitlab ~]# vim /var/opt/gitlab/nginx/conf/gitlab-http.conf 12345678910111213141516server &#123; listen *:80; rewrite ^(.*)$ https://$host$1 permanent; # 新增 server_name gitlab.example.com; server_tokens off; ## Don&apos;t show the nginx version number, a security best practice location / &#123; return 301 https://gitlab.example.com:443$request_uri; &#125; access_log /var/log/gitlab/nginx/gitlab_access.log gitlab_access; error_log /var/log/gitlab/nginx/gitlab_error.log;&#125; 重启 gitlab 1[root@gitlab ~]# gitlab-ctl restart","categories":[{"name":"linux","slug":"linux","permalink":"http://yoursite.com/categories/linux/"}],"tags":[{"name":"linux","slug":"linux","permalink":"http://yoursite.com/tags/linux/"},{"name":"gitlab","slug":"gitlab","permalink":"http://yoursite.com/tags/gitlab/"}]},{"title":"使用 Ambari 部署 Hadoop 集群","slug":"ambari","date":"2018-12-17T16:00:00.000Z","updated":"2019-07-23T07:15:03.007Z","comments":true,"path":"2018/12/18/ambari/","link":"","permalink":"http://yoursite.com/2018/12/18/ambari/","excerpt":"","text":"配置本地yum源安装httpd1yum install httpd -y 在官方下载镜像文件123456wget http://public-repo-1.hortonworks.com/ambari/centos7/2.x/updates/2.6.1.0/ambari.repowget http://public-repo-1.hortonworks.com/HDP/centos7/2.x/updates/2.6.4.0/hdp.repowget http://public-repo-1.hortonworks.com/ambari/centos7/2.x/updates/2.6.1.0/ambari-2.6.1.0-centos7.tar.gzwget http://public-repo-1.hortonworks.com/HDP-UTILS-1.1.0.22/repos/centos7/HDP-UTILS-1.1.0.22-centos7.tar.gzwget http://public-repo-1.hortonworks.com/HDP-GPL/centos7/2.x/updates/2.6.4.0/HDP-GPL-2.6.4.0-centos7-rpm.tar.gzwget http://public-repo-1.hortonworks.com/HDP/centos7/2.x/updates/2.6.4.0/HDP-2.6.4.0-centos7-rpm.tar.gz 将对应的tar包解压到httpd的文件目录12345cd /var/www/htmltar -zxvf ambari-2.6.1.0-centos7.tar.gztar -zxvf HDP-2.6.4.0-centos7-rpm.tar.gz tar -zxvf HDP-GPL-2.6.4.0-centos7-rpm.tar.gz tar -zxvf HDP-UTILS-1.1.0.22-centos7.tar.gz 配置基础源，创建hadoop的repo文件12# ambari 源vim /etc/yum.repo.d/ambari.repo 1234567[ambari-2.6.1.0]name=ambari Version - ambari-2.6.1.0baseurl=http://192.168.10.11/ambari/centos7/2.6.1.0-143gpgcheck=1gpgkey=http://192.168.10.11/ambari/centos7/2.6.1.0-143/RPM-GPG-KEY/RPM-GPG-KEY-Jenkinsenabled=1priority=1 12# hadoop源vim /etc/yum.repo.d/hdp.repo 123456789101112131415161718192021222324#VERSION_NUMBER=2.6.4.0-91[HDP-2.6.4.0]name=HDP Version - HDP-2.6.4.0baseurl=http://192.168.10.11/HDP/centos7/2.6.4.0-91gpgcheck=1gpgkey=http://192.168.10.11/HDP/centos7/2.6.4.0-91/RPM-GPG-KEY/RPM-GPG-KEY-Jenkinsenabled=1priority=1[HDP-UTILS-1.1.0.22]name=HDP-UTILS Version - HDP-UTILS-1.1.0.22baseurl=http://192.168.10.11/HDP-UTILS/centos7/1.1.0.22/gpgcheck=1gpgkey=http://192.168.10.11/HDP-UTILS/centos7/1.1.0.22/RPM-GPG-KEY/RPM-GPG-KEY-Jenkinsenabled=1priority=1[HDP-GPL-2.6.4.0]name=HDP-GPL Version - HDP-GPL-2.6.4.0baseurl=http://192.168.10.11/HDP-GPL/centos7/2.6.4.0-91gpgcheck=1gpgkey=http://192.168.10.11/HDP-GPL/centos7/2.6.4.0-91/RPM-GPG-KEY/RPM-GPG-KEY-Jenkinsenabled=1priority=1 启动httpd12systemctl enable httpdsystemctl start httpd 将本地源的repo配置拷贝到其它节点，并创建缓存123scp /etc/yum.repos.d/ambari.repo 192.168.135.4:/etc/yum.repos.d/scp /etc/yum.repos.d/ambari.repo 192.168.135.5:/etc/yum.repos.d/scp /etc/yum.repos.d/hdp.repo 192.168.135.6:/etc/yum.repos.d/ 在各个节点创建缓存： 12yum clean allyum makecache fast 初始化环境各个节点安装java-1.8.0-openjdk1yum install java-1.8.0-openjdk -y 解析主机名123echo \"192.168.135.4 node2\" &gt;&gt; /etc/hostsecho \"192.168.135.5 node3\" &gt;&gt; /etc/hostsecho \"192.168.135.6 node4\" &gt;&gt; /etc/hosts 创建主机信任关系1234ssh-keygenssh-copy-id node-1ssh-copy-id node-2ssh-copy-id node-3 安装配置数据库123yum install mariadb-server -ysystemctl enable mariadbsystemctl start mariadb 创建数据库1mysql 123456789set password=password('123456');grant all on *.* to root@localhost identified by '123456';grant all on *.* to root@'%' identified by '123456';create database ambari default character set utf8;grant all on ambari.* to ambari@localhost identified by 'bigdata';grant all on ambari.* to ambari@'%' identified by 'bigdata';create database hive default character set utf8;grant all on hive.* to hive@localhost identified by 'hive';grant all on hive.* to hive@'%' identified by 'hive'; 安装Amabri服务在node-1上安装ambari-server,并启动配置向导12yum install ambari-server -yambari-server setup 按照配置向导信息、配置用户、java_home123456789101112131415161718192021222324252627282930313233343536373839404142434445ambari-server setupUsing python /usr/bin/pythonSetup ambari-serverChecking SELinux...SELinux status is 'disabled'Customize user account for ambari-server daemon [y/n] (n)? yEnter user account for ambari-server daemon (root):ambari Adjusting ambari-server permissions and ownership...Checking firewall status...Checking JDK...[1] Oracle JDK 1.8 + Java Cryptography Extension (JCE) Policy Files 8[2] Oracle JDK 1.7 + Java Cryptography Extension (JCE) Policy Files 7[3] Custom JDK==============================================================================Enter choice (1): 3WARNING: JDK must be installed on all hosts and JAVA_HOME must be valid on all hosts.WARNING: JCE Policy files are required for configuring Kerberos security. If you plan to use Kerberos,please make sure JCE Unlimited Strength Jurisdiction Policy Files are valid on all hosts.Path to JAVA_HOME: /usr/lib/jvm/java-1.8.0-openjdk-1.8.0.161-0.b14.el7_4.x86_64/jre # 填写java_homeValidating JDK on Ambari Server...done.Checking GPL software agreement...GPL License for LZO: https://www.gnu.org/licenses/old-licenses/gpl-2.0.en.htmlEnable Ambari Server to download and install GPL Licensed LZO packages [y/n] (n)? nCompleting setup...Configuring database...Enter advanced database configuration [y/n] (n)? y Configuring database...==============================================================================Choose one of the following options:[1] - PostgreSQL (Embedded)[2] - Oracle[3] - MySQL / MariaDB[4] - PostgreSQL[5] - Microsoft SQL Server (Tech Preview)[6] - SQL Anywhere[7] - BDB==============================================================================Enter choice (1): 3Hostname (localhost): Port (3306): Database name (ambari): Username (ambari): Enter Database Password (bigdata): Configuring ambari database...WARNING: Before starting Ambari Server, you must copy the MySQL JDBC driver JAR file to /usr/share/java and set property \"server.jdbc.driver.path=[path/to/custom_jdbc_driver]\" in ambari.properties.Press &lt;enter&gt; to continue. 到上面一步时，根据提示上传mysql的jdbc驱动，并修改配置文件，指定jdbc驱动文件位置：123456cd /usr/share/javalltar xf mysql-connector-java-5.1.45.tar.gz mv mysql-connector-java-5.1.45/mysql-connector-java-5.1.45-bin.jar ./# 修改配置文件：vim /etc/ambari-server/conf/ambari.properties 1server.jdbc.driver.path=/usr/share/java/mysql-connector-java-5.1.45-bin.jar 配置完成后继续，会出现如下提示： Press to continue.Configuring remote database connection properties…WARNING: Before starting Ambari Server, you must run the following DDL against the database to create the schema: /var/lib/ambari-server/resources/Ambari-DDL-MySQL-CREATE.sqlProceed with configuring remote database connection properties [y/n] (y)? 出现上述提示时，根据信息导入数据库1mysql -uroot -p ambari &lt; /var/lib/ambari-server/resources/Ambari-DDL-MySQL-CREATE.sql 启动服务1ambari-server start","categories":[{"name":"linux","slug":"linux","permalink":"http://yoursite.com/categories/linux/"}],"tags":[{"name":"linux","slug":"linux","permalink":"http://yoursite.com/tags/linux/"},{"name":"ambari","slug":"ambari","permalink":"http://yoursite.com/tags/ambari/"},{"name":"hadoop","slug":"hadoop","permalink":"http://yoursite.com/tags/hadoop/"}]},{"title":"Ansible 自动化运维实战","slug":"ansible","date":"2018-12-16T16:00:00.000Z","updated":"2019-07-23T07:15:13.338Z","comments":true,"path":"2018/12/17/ansible/","link":"","permalink":"http://yoursite.com/2018/12/17/ansible/","excerpt":"","text":"Ad-Hoc命令简介并行和Shell命令让我们使用Ansible的命令行工具重启atlanta的所有Web服务器，一次10个。首先，让我们设置SSH代理，以便它能记住我们的凭据： 12ssh-agent bashssh-add ~/.ssh/id_rsa playbook 1234567[nginx]name=nginx repobaseurl=http://nginx.org/packages/OS/OSRELEASE/$basearch/gpgcheck=0enabled=1","categories":[{"name":"linux","slug":"linux","permalink":"http://yoursite.com/categories/linux/"}],"tags":[{"name":"linux","slug":"linux","permalink":"http://yoursite.com/tags/linux/"},{"name":"ansible","slug":"ansible","permalink":"http://yoursite.com/tags/ansible/"},{"name":"python","slug":"python","permalink":"http://yoursite.com/tags/python/"}]},{"title":"Arch Linux 入坑指南","slug":"archlinux_install","date":"2018-12-15T16:00:00.000Z","updated":"2019-07-23T07:15:16.271Z","comments":true,"path":"2018/12/16/archlinux_install/","link":"","permalink":"http://yoursite.com/2018/12/16/archlinux_install/","excerpt":"","text":"系统安装连接网络1wifi-menu 磁盘分区123456fdisk -lfdisk /dev/sda# 1. 先将硬盘格式转换为 GPT# 2. 创建 sda1 EFI 分区 200M# 3. 创建 ada2 boot 分区 1G# 4. 剩下的 sda3 Linux LVM 分区 1234# 格式化三个分区mkfs.vfat -F32 /dev/sda1mkfs.ext4 /dev/sda2mkfs.xfs /dev/sda3 查看硬盘的分区情况1lsblk -l 创建并挂载目录12345678# 一定要先挂载 /mntmount /dev/sda3 /mnt# 创建 boot 文件夹并挂载mkdir /mnt/bootmount /dev/sda2 /mnt/boot# 创建 efi 文件夹并挂载mkdir /mnt/boot/efimount /dev/sda1 /mnt/boot/efi 安装基本系统1pacstrap /mnt base 生成 fstab1genfstab -U /mnt &gt;&gt; /mnt/etc/fstab Change root 到新安装的系统12arch-chroot /mntpacman -S vim net-tools Locale12# 编辑地区信息生成文件vim /etc/locale.gen 1234# 生成地区信息locale-gen# 写进配置文件echo LANG=zh_CN.UTF-8 &gt; /etc/locale.conf 设置时区12ln -S /usr/share/zoneinfo/Asia/Shanghai /etc/localtimehwclock --localtime 主机名12echo myhostname &gt; /etc/hostnamevim /etc/hosts Root 密码1passwd 安装 GRUB1234pacman -S grub-efi-x86_64pacman -S efibootmgrgrub-install --efi-directory=/boot/efi --bootloader-id=arch --recheckgrub-mkconfig -o /boot/grub/grub.cfg 重启12345exitumount /mnt/boot/efiumount /mnt/bootumount /mntreboot 安装图形化界面设置 archlinux 源1vim /etc/pacman.d/mirrorlist 更新源并且安装yaourt:1pacman -Syu yaourt 安装驱动 触摸板驱动 1pacman -S xf86-input-libinput xf86-input-synaptics 显示驱动 123pacman -S xf86-video-intelpacman -S mesa-libgl libva-intel-driver libvdpau-va-glmesa-demospacman -S nvidia nvidia-settings 声音 1pacman -S alsa-utils 无线网卡安装BCM4322 123pacman -S linux-firmwarepacman -S linux-headersyaourt -S broadcom-wl-dkms 安装Deepin桌面环境 1.安装Xorg和其工具包 1pacman -S xorg-server xorg-xinit 2.DDE基本环境安装 123pacman -S deepin deepin-extra lightdmpacman -S file-roller evince gedit thunderbird gpicviewpacman -S unrar unzip p7zip 3.修改lightdm.conf使用登录管理器 123/etc/lightdm/lightdm.confgreeter-session=lightdm-deepin-greetersystemctl enable lightdm 4.配置网络连接 12pacman -S networkmanagersystemctl enable NetworkManager 安装常用软件 1.搜狗输入法安装 12pacman -S fcitx fcitx-configtoolpacman -S fcitx-sougoupinyin 在用户目录下添加个配置文件： 1234nano ~/.xprofileexport GTK_IM_MODULE=fcitxexport QT_IM_MODULE=fcitxexport XMODIFIERS=@im=fcitx 1pacman -S opencc （简体和繁体互相转换的库） 2.浏览器 1234pacman -S chromiumpacman -S google-chromepacman -S firefoxpacman -S git","categories":[{"name":"linux","slug":"linux","permalink":"http://yoursite.com/categories/linux/"}],"tags":[{"name":"linux","slug":"linux","permalink":"http://yoursite.com/tags/linux/"},{"name":"archlinux","slug":"archlinux","permalink":"http://yoursite.com/tags/archlinux/"}]},{"title":"Linux 文本处理器之 awk","slug":"awk","date":"2018-12-14T16:00:00.000Z","updated":"2019-07-23T07:15:19.255Z","comments":true,"path":"2018/12/15/awk/","link":"","permalink":"http://yoursite.com/2018/12/15/awk/","excerpt":"","text":"12345678910111213awk 'BEGIN&#123;FS=\"[:]\"&#125; &#123;aa+=$3&#125; END&#123;print \"所用的UID的和是:\",aa&#125;' passwdFS awk 'BEGIN&#123;FS=\"[:]\"&#125; /root/&#123;print $1,$2&#125;' passwdOFS awk 'BEGIN&#123;FS=\"[:]\";OFS=\"---\"&#125; /root/&#123;print $1,$2&#125;' passwdNF awk -F: '&#123;print NF&#125;' passwdRS awk 'BEGIN&#123;FS=\"[,]\";RS=\" \"&#125;&#123;print $2&#125;' bb.txtORS awk 'BEGIN&#123;FS=\"[:]\";ORS=\"---\"&#125;&#123;print $0&#125;' passwdFILENAME awk -F\"[:]\" '&#123;print FILENAME&#125;' passwdNR awk '&#123;print NR&#125;' a.txt b.txtFNR awk '&#123;print NR&#125;' a.txt b.txt# NR==FNR 此时处理的是第一个文件# NR!=FNR 此时处理的是第二个文件awk 'NR==FNR&#123;print FILENAME&#125; NR!=FNR&#123;print FILENAME&#125;' a.txt b.txtif awk -F[:] '&#123;if($3&lt;=1000)&#123;print $1\"是root用户\"&#125;else&#123;print $1\"是普通用户\"&#125;&#125;' /etc/passwd 变量名 属性 $0 当前记录 $1~$n 当前记录的第n个字段 FS 输入字段分隔符，默认为空格 RS 输入记录分割符，默认为换行符 NF 当前记录中的字段个数，就是有多少列 NR 已经读出的记录数，就是行号，从1开始 OFS 输出字符分隔符，默认也是空格 ORS 输出的记录分隔符，默认为换行符","categories":[{"name":"shell","slug":"shell","permalink":"http://yoursite.com/categories/shell/"}],"tags":[{"name":"linux","slug":"linux","permalink":"http://yoursite.com/tags/linux/"},{"name":"shell","slug":"shell","permalink":"http://yoursite.com/tags/shell/"}]},{"title":"CentOS Oracle 12c 安装指南","slug":"centos_install_oracle12c","date":"2018-12-13T16:00:00.000Z","updated":"2019-07-23T07:15:29.545Z","comments":true,"path":"2018/12/14/centos_install_oracle12c/","link":"","permalink":"http://yoursite.com/2018/12/14/centos_install_oracle12c/","excerpt":"","text":"1. 优化、安装必要的工具1234567[root@oracle12c ~]$ yum -y install unzip vim lrzsz[root@oracle12c ~]$ setenforce 0[root@oracle12c ~]$ sed -i &apos;s/SELINUX=enforcing/SELINUX=disabled/&apos; /etc/selinux/config[root@oracle12c ~]$ reboot[root@oracle12c ~]$ sed -i &apos;s/^GSSAPIAuthentication yes$/GSSAPIAuthentication no/&apos; /etc/ssh/sshd_config[root@oracle12c ~]$ sed -i &apos;s/#UseDNS yes/UseDNS no/&apos; /etc/ssh/sshd_config[root@oracle12c ~]$ service sshd restart 2. 安装依赖1[root@oracle12c ~]$ yum -y install binutils compat-libcap1 compat-libstdc++-33 compat-libstdc++-33*.i686 elfutils-libelf-devel gcc gcc-c++ glibc*.i686 glibc glibc-devel glibc-devel*.i686 ksh libgcc*.i686 libgcc libstdc++ libstdc++*.i686 libstdc++-devel libstdc++-devel*.i686 libaio libaio*.i686 libaio-devel libaio-devel*.i686 make sysstat unixODBC unixODBC*.i686 unixODBC-devel unixODBC-devel*.i686 libXp 3. 建立用户和组12345[root@oracle12c ~]$ groupadd oinstall[root@oracle12c ~]$ groupadd dba[root@oracle12c ~]$ groupadd oper[root@oracle12c ~]$ useradd -g oinstall -G dba,oper oracle[root@oracle12c ~]$ echo oracle | passwd --stdin oracle 4. 创建安装、备份目录12[root@oracle12c ~]$ mkdir -p /u01/app/oracle/product/12.2.0[root@oracle12c ~]$ chown -R oracle:oinstall /u01 5. 更改共享内存1[root@oracle12c ~]$ echo &quot;shmfs /dev/shm tmpfs size=12g 0&quot; &gt;&gt; /etc/fstab 6. 修改内核参数1[root@oracle12c ~]$ vim /etc/sysctl.conf 1234567891011121314fs.file-max = 6815744kernel.sem = 250 32000 100 128kernel.shmmni = 4096kernel.shmall = 4294967296kernel.shmmax = 4398046511104kernel.panic_on_oops = 1net.core.rmem_default = 262144net.core.rmem_max = 4194304net.core.wmem_default = 262144net.core.wmem_max = 1048576net.ipv4.conf.all.rp_filter = 2net.ipv4.conf.default.rp_filter = 2fs.aio-max-nr = 1048576net.ipv4.ip_local_port_range = 9000 65500 1[root@oracle12c ~]$ sysctl -p 7. 改文件限制1[root@oracle12c ~]$ vim /etc/security/limits.conf 12345oracle soft nproc 2047oracle hard nproc 16384oracle soft nofile 1024oracle hard nofile 65536oracle soft stack 10240 8. 修改登陆配置文件1[root@oracle12c ~]$ vim /etc/pam.d/login 1session required pam_limits.so 9. 修改 ulimit1[root@oracle12c ~]$ vim /etc/profile 12345678if [ $USER = &quot;oracle&quot; ]; then if [ $SHELL = &quot;/bin/ksh&quot; ]; then ulimit -p 16384 ulimit -n 65536a else ulimit -u 16384 -n 65536 fifi 10. 修改环境变量1[root@oracle12c ~]$ vim ~/.bash_profile 1234567PATH=$PATH:$HOME/.local/bin:$HOME/bin:$ORACLE_HOME/binORACLE_BASE=/u01/app/oracleORACLE_HOME=$ORACLE_BASE/product/12.2.0ORACLE_SID=orclexport ORACLE_BASE ORACLE_HOME ORACLE_SIDexport NLS_LANG=&quot;AMERICAN_AMERICA.UTF8&quot;export PATH 11. 修改 hosts 文件1[root@oracle12c ~]$ vim /etc/hosts 1[ipaddr] oracle12c 12. 上传安装包 linuxx64_12201_database.zip1[oracle@oracle12c ~]$ rz 13. 静默安装数据库软件12[oracle@oracle12c ~]$ cd database[oracle@oracle12c database]$ ./runInstaller -silent -ignoreSysPrereqs -ignorePrereq -responseFile /home/oracle/database/response/db_install.rsp /home/oracle/database/response/db_install.rsp 1234567891011121314151617oracle.install.responseFileVersion=/oracle/install/rspfmt_dbinstall_response_schema_v12.2.0oracle.install.option=INSTALL_DB_SWONLYUNIX_GROUP_NAME=dbaINVENTORY_LOCATION=/u01/app/oracle/oraInventoryORACLE_HOME=/u01/app/oracle/product/12.2.0ORACLE_BASE=/u01/app/oracleoracle.install.db.InstallEdition=EEoracle.install.db.OSDBA_GROUP=dbaoracle.install.db.OSOPER_GROUP=dbaoracle.install.db.OSBACKUPDBA_GROUP=dbaoracle.install.db.OSDGDBA_GROUP=dbaoracle.install.db.OSKMDBA_GROUP=dbaoracle.install.db.OSRACDBA_GROUP=dbaoracle.install.db.CLUSTER_NODES=oracle.install.db.isRACOneInstall=falseSECURITY_UPDATES_VIA_MYORACLESUPPORT=falseDECLINE_SECURITY_UPDATES=true 14. 建立数据库1[oracle@oracle12c ~]$ $ORACLE_HOME/bin/dbca -silent -createDatabase -templateName General_Purpose.dbc -gdbname orcl -sid orcl -responseFile NO_VALUE -characterSet AL32UTF8 -memoryPercentage 50 -emConfiguration LOCAL root 用户下执行以下命令 12[root@oracle12c ~]$ /oracle/oraInventory/orainstRoot.sh[root@oracle12c ~]$ /oracle/product/12.2.0/root.sh 15. 修改参数1[oracle@oracle12c ~]$ sqlplus / as sysdba 12345678910111213141516171819202122232425262728293031323334353637383940SQL&gt; alter system set sga_target=0 scope=spfile;SQL&gt; alter system set pga_aggregate_target=0 scope=spfile;SQL&gt; alter system set db_files=2000 scope=spfile;SQL&gt; alter system set memory_max_target=12g scope=spfile;SQL&gt; alter system set memory_target=8g scope=spfile;SQL&gt; alter system set LOG_ARCHIVE_DEST_1='LOCATION=/backup/arch' scope=spfile;SQL&gt; alter SYSTEM set db_recovery_file_dest_size=4096M scope=spfile;SQL&gt; alter system set undo_retention=3600 scope=spfile;SQL&gt; alter system set processes=6000 scope=spfile;SQL&gt; alter system set sessions=8000 scope=spfile;SQL&gt; alter system set open_cursors=2000 scope=both;SQL&gt; create pfile='/tmp/pfile01.ora' from spfile;SQL&gt; alter system set filesystemio_options='asynch' scope=spfile;SQL&gt; alter system set disk_asynch_io=true SCOPE=SPFILE;SQL&gt; create directory expdp_dir as '/backup/expdp';SQL&gt; grant write,read on directory expdp_dir to public;SQL&gt; alter database add logfile group 4 '/u01/app/oracle/oradata/orcl/redo04.log' size 1G;SQL&gt; alter database add logfile group 5 '/u01/app/oracle/oradata/orcl/redo05.log' size 1G;SQL&gt; alter database add logfile group 6 '/u01/app/oracle/oradata/orcl/redo06.log' size 1G;SQL&gt; alter system switch logfile;SQL&gt; alter system switch logfile;SQL&gt; alter system switch logfile;SQL&gt; alter system checkpoint;SQL&gt; alter database drop logfile group 1;SQL&gt; alter database drop logfile group 2;SQL&gt; alter database drop logfile group 3;SQL&gt; host rm -rf /u01/app/oracle/oradata/orcl/redo0[1-3].logSQL&gt; alter database add logfile group 1 '/u01/app/oracle/oradata/orcl/redo01.log' size 1G;SQL&gt; alter database add logfile group 2 '/u01/app/oracle/oradata/orcl/redo02.log' size 1G;SQL&gt; alter database add logfile group 3 '/u01/app/oracle/oradata/orcl/redo03.log' size 1G; SQL&gt; alter system switch logfile;SQL&gt; alter system switch logfile;SQL&gt; alter system switch logfile;SQL&gt; alter system checkpoint;SQL&gt; shutdown immediateSQL&gt; startup mountSQL&gt; alter database archivelog;SQL&gt; alter database open;SQL&gt; alter profile default limit FAILED_LOGIN_ATTEMPTS unlimited;SQL&gt; create pfile='/tmp/pfile02.ora' from spfile; 16. 修改 Oracle 服务启动配置1[root@oracle12c ~]$ vim /etc/oratab 1orcl:/u01/app/oracle/product/12.2.0:Y","categories":[{"name":"database","slug":"database","permalink":"http://yoursite.com/categories/database/"}],"tags":[{"name":"linux","slug":"linux","permalink":"http://yoursite.com/tags/linux/"},{"name":"oracle","slug":"oracle","permalink":"http://yoursite.com/tags/oracle/"}]},{"title":"Docker 入坑指南","slug":"docker","date":"2018-12-11T16:00:00.000Z","updated":"2019-07-23T07:15:32.979Z","comments":true,"path":"2018/12/12/docker/","link":"","permalink":"http://yoursite.com/2018/12/12/docker/","excerpt":"","text":"1. Docker 安装 Ubuntu 123456789101112131415161718# step 1: 安装必要的一些系统工具sudo apt updatesudo apt -y install apt-transport-https ca-certificates curl software-properties-common# step 2: 安装GPG证书curl -fsSL http://mirrors.aliyun.com/docker-ce/linux/ubuntu/gpg | sudo apt-key add -# Step 3: 写入软件源信息sudo add-apt-repository \"deb [arch=amd64] http://mirrors.aliyun.com/docker-ce/linux/ubuntu $(lsb_release -cs) stable\"# Step 4: 更新并安装 Docker-CEsudo apt -y updatesudo apt -y install docker-ce# 安装指定版本的Docker-CE:# Step 1: 查找Docker-CE的版本:# apt-cache madison docker-ce# docker-ce | 17.03.1~ce-0~ubuntu-xenial | http://mirrors.aliyun.com/docker-ce/linux/ubuntu xenial/stable amd64 Packages# docker-ce | 17.03.0~ce-0~ubuntu-xenial | http://mirrors.aliyun.com/docker-ce/linux/ubuntu xenial/stable amd64 Packages# Step 2: 安装指定版本的Docker-CE: (VERSION 例如上面的 17.03.1~ce-0~ubuntu-xenial)# sudo apt-get -y install docker-ce=[VERSION] CentOS 1234567891011121314151617181920212223242526# step 1: 安装必要的一些系统工具yum install -y yum-utils device-mapper-persistent-data lvm2# Step 2: 添加软件源信息yum-config-manager --add-repo http://mirrors.aliyun.com/docker-ce/linux/centos/docker-ce.repo# Step 3: 更新并安装 Docker-CEyum makecache fastyum -y install docker-ce# Step 4: 开启Docker服务service docker start# 注意：# 官方软件源默认启用了最新的软件，您可以通过编辑软件源的方式获取各个版本的软件包。例如官方并没有将测试版本的软件源置为可用，你可以通过以下方式开启。同理可以开启各种测试版本等。# vim /etc/yum.repos.d/docker-ce.repo# 将 [docker-ce-test] 下方的 enabled=0 修改为 enabled=1## 安装指定版本的Docker-CE:# Step 1: 查找Docker-CE的版本:# yum list docker-ce.x86_64 --showduplicates | sort -r# Loading mirror speeds from cached hostfile# Loaded plugins: branch, fastestmirror, langpacks# docker-ce.x86_64 17.03.1.ce-1.el7.centos docker-ce-stable# docker-ce.x86_64 17.03.1.ce-1.el7.centos @docker-ce-stable# docker-ce.x86_64 17.03.0.ce-1.el7.centos docker-ce-stable# Available Packages# Step2 : 安装指定版本的Docker-CE: (VERSION 例如上面的 17.03.0.ce.1-1.el7.centos)# sudo yum -y install docker-ce-[VERSION] 2.3. 常见问题 防火墙的问题 123# CentOS 7 firewalld 设置，添加相应端口firewall-cmd --permanent --add-port 80/tcpfirewall-cmd --reload IPv4 forwarding is disabled. Networking will not work. 12# vim /usr/lib/sysctl.d/00-system.conf 在最后添加一行net.ipv4.ip_forward=1","categories":[{"name":"linux","slug":"linux","permalink":"http://yoursite.com/categories/linux/"}],"tags":[{"name":"linux","slug":"linux","permalink":"http://yoursite.com/tags/linux/"},{"name":"docker","slug":"docker","permalink":"http://yoursite.com/tags/docker/"}]},{"title":"搭建基于 HDFS 碎片文件存储服务","slug":"hdfs","date":"2018-12-09T16:00:00.000Z","updated":"2019-07-23T07:15:46.102Z","comments":true,"path":"2018/12/10/hdfs/","link":"","permalink":"http://yoursite.com/2018/12/10/hdfs/","excerpt":"","text":"准备 Java 环境123yum -y install java-1.8.0-openjdk*java -versionvim /etc/profile 123export JAVA_HOME=/usr/lib/jvm/jre-1.8.0-openjdkexport PATH=$PATH:$JAVA_HOME/binexport CLASSPATH=.:$JAVA_HOME/lib/dt.jar:$JAVA_HOME/lib/tools.jar 1source /etc/profile 准备 HDFS 环境配置 SSH先后执行如下两行命令，配置 SSH 以无密码模式登陆： 12ssh-keygen -t dsa -P '' -f ~/.ssh/id_dsacat ~/.ssh/id_dsa.pub &gt;&gt; ~/.ssh/authorized_keys 接着可以验证下，在不输入密码的情况下，应该能使用 ssh 命令成功连接本机： 安装 Hadoop123456# 创建 /data/hadoop 目录，然后进入该目录：mkdir -p /data/hadoop &amp;&amp; cd $_# 下载并解压 Hadoop：wget http://archive.apache.org/dist/hadoop/core/hadoop-2.7.1/hadoop-2.7.1.tar.gztar -zxvf hadoop-2.7.1.tar.gzmv hadoop-2.7.1 hadoop &amp;&amp; mv $_ /usr/local/ 修改 Hadoop 环境配置文件 1vim /usr/local/hadoop/etc/hadoop/hadoop-env.sh 1export JAVA_HOME=/usr/lib/jvm/jre-1.8.0-openjdk 查看下 Hadoop 的版本： 1/usr/local/hadoop/bin/hadoop version 修改 Hadoop 配置由于我们的实践环境是在单机下进行的，所以此处把 Hadoop 配置为伪分布式模式。新建若干临时文件夹，我们在后续的配置中以及 HDFS 和 Hadoop 的启动过程中会使用到这些文件夹： 1cd /usr/local/hadoop &amp;&amp; mkdir -p tmp dfs/name dfs/data 修改 HDFS 配置文件 core-site.xml 1vim /usr/local/hadoop/etc/hadoop/core-site.xml 12345678910&lt;configuration&gt; &lt;property&gt; &lt;name&gt;hadoop.tmp.dir&lt;/name&gt; &lt;value&gt;/usr/local/hadoop/tmp&lt;/value&gt; &lt;/property&gt; &lt;property&gt; &lt;name&gt;fs.defaultFS&lt;/name&gt; &lt;value&gt;hdfs://localhost:9000&lt;/value&gt; &lt;/property&gt; &lt;/configuration&gt; 修改 HDFS 配置文件 hdfs-site.xml 1vim /usr/local/hadoop/etc/hadoop/hdfs-site.xml 123456789101112131415161718&lt;configuration&gt; &lt;property&gt; &lt;name&gt;dfs.replication&lt;/name&gt; &lt;value&gt;1&lt;/value&gt; &lt;/property&gt; &lt;property&gt; &lt;name&gt;dfs.namenode.name.dir&lt;/name&gt; &lt;value&gt;file:/usr/local/hadoop/dfs/name&lt;/value&gt; &lt;/property&gt; &lt;property&gt; &lt;name&gt;dfs.datanode.data.dir&lt;/name&gt; &lt;value&gt;file:/usr/local/hadoop/dfs/data&lt;/value&gt; &lt;/property&gt; &lt;property&gt; &lt;name&gt;dfs.permissions&lt;/name&gt; &lt;value&gt;false&lt;/value&gt; &lt;/property&gt; &lt;/configuration&gt; 修改 HDFS 配置文件 yarn-site.xml 1vim /usr/local/hadoop/etc/hadoop/yarn-site.xml 1234567891011&lt;configuration&gt; &lt;property&gt; &lt;name&gt;mapreduce.framework.name&lt;/name&gt; &lt;value&gt;yarn&lt;/value&gt; &lt;/property&gt; &lt;property&gt; &lt;name&gt;yarn.nodemanager.aux-services&lt;/name&gt; &lt;value&gt;mapreduce_shuffle&lt;/value&gt; &lt;/property&gt; &lt;/configuration&gt; 启动 Hadoop 12345678910cd /usr/local/hadoop/bin/# 对 HDFS 文件系统进行格式化：./hdfs namenode -format# 接着进入如下目录cd /usr/local/hadoop/sbin/# 先后执行如下两个脚本启动 Hadoop./start-dfs.sh./start-yarn.sh# 验证 Hadoop 是否启动成功：jps 在浏览器中访问如下链接，应该能正常访问： http://&lt;您的 IP 地址&gt;:50070/explorer.html#/接下来，我们实践下如何将碎片文件存储到 HDFS 中。 存储碎片文件准备碎片文件123456# 创建目录用于存放碎片文件，进入该目录：mkdir -p /data/file &amp;&amp; cd /data/file# 新建一批碎片文件到该目录下i=1; while [ $i -le 99 ]; do name=`printf \"test%02d.txt\" $i`; touch \"$name\"; i=$(($i+1)); donels 将碎片文件存储在 HDFS 中12# 在 HDFS 上新建目录/usr/local/hadoop/bin/hadoop fs -mkdir /dest 此时，在浏览器是访问如下链接，可以看到 /dest 目录已创建，但是暂时还没有内容： http://&lt;您的 IP 地址&gt;:50070/explorer.html#/dest 上传碎片文件123456groupadd supergroupusermod -a -G supergroup root# 将之前创建的碎片文件上传到 HDFS 中：cd /data/file &amp;&amp; /usr/local/hadoop/bin/hadoop fs -put *.txt /dest/usr/local/hadoop/bin/hadoop fs -ls /dest# 在上传之前，我们需先创建 HDFS 用户组 supergroup，然后将 root 用户添加到该组中，否则会因权限问题页报告异常。 访问服务在浏览器是访问如下链接，可以看到 /dest 目录的文件内容： 1http://&lt;您的 IP 地址&gt;:50070/explorer.html#/dest","categories":[{"name":"linux","slug":"linux","permalink":"http://yoursite.com/categories/linux/"}],"tags":[{"name":"linux","slug":"linux","permalink":"http://yoursite.com/tags/linux/"},{"name":"hadoop","slug":"hadoop","permalink":"http://yoursite.com/tags/hadoop/"}]},{"title":"Hexo 打造静态博客","slug":"hexo","date":"2018-12-08T16:00:00.000Z","updated":"2019-07-23T07:15:49.414Z","comments":true,"path":"2018/12/09/hexo/","link":"","permalink":"http://yoursite.com/2018/12/09/hexo/","excerpt":"","text":"1npm install hexo-deployer-git --save 修改主页配置文件 _config.yml1post_asset_folder : true 安装本地图片插件1npm install hexo-asset-image --save 生成新的博文1hexo n &quot;xxx&quot; 此时 /source/_posts/ 下会生成同名文件夹 博文引入图片1![](xxx/xxx.jpg)","categories":[{"name":"tools","slug":"tools","permalink":"http://yoursite.com/categories/tools/"}],"tags":[{"name":"blog","slug":"blog","permalink":"http://yoursite.com/tags/blog/"},{"name":"hexo","slug":"hexo","permalink":"http://yoursite.com/tags/hexo/"},{"name":"nodejs","slug":"nodejs","permalink":"http://yoursite.com/tags/nodejs/"}]},{"title":"history 添加时间戳","slug":"bash_history","date":"2018-12-07T16:00:00.000Z","updated":"2019-07-23T07:15:22.346Z","comments":true,"path":"2018/12/08/bash_history/","link":"","permalink":"http://yoursite.com/2018/12/08/bash_history/","excerpt":"","text":"添加环境变量1[root@client ~]# vim /etc/profile 12HISTTIMEFORMAT=\"%Y-%m-%d %H:%M:%S\"export HISTTIMEFORMAT","categories":[{"name":"linux","slug":"linux","permalink":"http://yoursite.com/categories/linux/"}],"tags":[{"name":"linux","slug":"linux","permalink":"http://yoursite.com/tags/linux/"},{"name":"shell","slug":"shell","permalink":"http://yoursite.com/tags/shell/"}]},{"title":"jekyll 打造静态博客","slug":"Jekyll","date":"2018-12-06T16:00:00.000Z","updated":"2019-07-23T07:16:02.944Z","comments":true,"path":"2018/12/07/Jekyll/","link":"","permalink":"http://yoursite.com/2018/12/07/Jekyll/","excerpt":"","text":"1. 安装之前先安装依赖包1sudo apt-get install ruby ruby-dev build-essential 2. 添加环境变量1234echo '# Install Ruby Gems to ~/gems' &gt;&gt; ~/.bashrcecho 'export GEM_HOME=$HOME/gems' &gt;&gt; ~/.bashrcecho 'export PATH=$HOME/gems/bin:$PATH' &gt;&gt; ~/.bashrcsource ~/.bashrc 3. 安装 Jekyll1gem install jekyll bundler 4. 使用 bundle 更新 Jekyll123jekyll --versiongem list jekyllbundle update jekyll 5. 使用 gem 更新 Jekyll1gem update jekyll 6. 更新 Rubygems1gem update --system 7. 安装预览版1234## 安装最新预览版gem install jekyll --pre## 安装特定版本的 Jekyllgem install jekyll -v '2.0.0.alpha.1' 8. 源码安装12345git clone git://github.com/jekyll/jekyll.gitcd jekyllscript/bootstrapbundle exec rake buildls pkg/*.gem | head -n 1 | xargs gem install -l","categories":[{"name":"tools","slug":"tools","permalink":"http://yoursite.com/categories/tools/"}],"tags":[{"name":"ruby","slug":"ruby","permalink":"http://yoursite.com/tags/ruby/"},{"name":"jekyll","slug":"jekyll","permalink":"http://yoursite.com/tags/jekyll/"},{"name":"blog","slug":"blog","permalink":"http://yoursite.com/tags/blog/"}]},{"title":"Keepalive 安装与配置","slug":"keepalive","date":"2018-12-05T16:00:00.000Z","updated":"2019-07-23T07:16:18.777Z","comments":true,"path":"2018/12/06/keepalive/","link":"","permalink":"http://yoursite.com/2018/12/06/keepalive/","excerpt":"","text":"1. 安装 keepalive1[root@centos ~]# yum -y install keepalived","categories":[{"name":"linux","slug":"linux","permalink":"http://yoursite.com/categories/linux/"}],"tags":[{"name":"linux","slug":"linux","permalink":"http://yoursite.com/tags/linux/"},{"name":"keepalive","slug":"keepalive","permalink":"http://yoursite.com/tags/keepalive/"}]},{"title":"Linux 网络管理","slug":"managenetwork","date":"2018-12-04T16:00:00.000Z","updated":"2019-07-23T07:16:24.666Z","comments":true,"path":"2018/12/05/managenetwork/","link":"","permalink":"http://yoursite.com/2018/12/05/managenetwork/","excerpt":"","text":"1. ARP 高速缓存1234567891011121314151617181920212223242526```Usage: arp [-vn] [&lt;HW&gt;] [-i &lt;if&gt;] [-a] [&lt;hostname&gt;] &lt;-Display ARP cache arp [-v] [-i &lt;if&gt;] -d &lt;host&gt; [pub] &lt;-Delete ARP entry arp [-vnD] [&lt;HW&gt;] [-i &lt;if&gt;] -f [&lt;filename&gt;] &lt;-Add entry from file arp [-v] [&lt;HW&gt;] [-i &lt;if&gt;] -s &lt;host&gt; &lt;hwaddr&gt; [temp] &lt;-Add entry arp [-v] [&lt;HW&gt;] [-i &lt;if&gt;] -Ds &lt;host&gt; &lt;if&gt; [netmask &lt;nm&gt;] pub &lt;-&apos;&apos;- -a display (all) hosts in alternative (BSD) style -e display (all) hosts in default (Linux) style -s, --set set a new ARP entry -d, --delete delete a specified entry -v, --verbose be verbose -n, --numeric don&apos;t resolve names -i, --device specify network interface (e.g. eth0) -D, --use-device read &lt;hwaddr&gt; from given device -A, -p, --protocol specify protocol family -f, --file read new entries from file or from /etc/ethers &lt;HW&gt;=Use &apos;-H &lt;hw&gt;&apos; to specify hardware address type. Default: ether List of possible hardware types (which support ARP): ash (Ash) ether (Ethernet) ax25 (AMPR AX.25) netrom (AMPR NET/ROM) rose (AMPR ROSE) arcnet (ARCnet) dlci (Frame Relay DLCI) fddi (Fiber Distributed Data Interface) hippi (HIPPI) irda (IrLAP) x25 (generic X.25) infiniband (InfiniBand) eui64 (Generic EUI-64)2. arpwatch：监听 ARP 记录3. arping：发送 ARP 请求到一个相邻主机4. finger：查找并显示用户信息5. ifconfig：设置网络接口6. iwconfig：设置无线网卡7. hostname：显示主机名8. ifup：激活设备9. ifdown：禁用网络设备10. mii-tool：调整网卡模式11. route：设置路由表12. netstat：查看网络连接13. ping：检测主机的连通性14. traceroute：检查数据包所经过的路由器15. wget：下载文件16. telnet：远程登陆17. ethtool：查询及设置网卡参数18. tc：显示和维护流量控制设置","categories":[{"name":"linux","slug":"linux","permalink":"http://yoursite.com/categories/linux/"}],"tags":[{"name":"linux","slug":"linux","permalink":"http://yoursite.com/tags/linux/"},{"name":"network","slug":"network","permalink":"http://yoursite.com/tags/network/"}]},{"title":"Linux 时区设置","slug":"timezone","date":"2018-12-03T16:00:00.000Z","updated":"2019-07-23T07:17:12.585Z","comments":true,"path":"2018/12/04/timezone/","link":"","permalink":"http://yoursite.com/2018/12/04/timezone/","excerpt":"","text":"1. 时间设置查看、设置硬件时间12345hwclock --showclock --show## 月/日/年时:分:秒hwclock --set --date=\"06/18/14 14:55\"clock --set --date=\"06/18/14 14:55\" 硬件时钟与系统时钟同步1234567## hc代表硬件时间，sys代表系统时间## 硬件时钟同步系统时钟hwclock --hctosysclock --hctosys## 系统时钟同步硬件时钟hwclock --systohcclock --systohc 同步 ntp 服务器123456## 安装 ntp、ntpdateyum -y install ntpntpdate &lt;IP&gt;## 添加定时任务crontab -e0 0 * * * /usr/sbin/ntpdate &lt;IP&gt; 2. 时区设置tzselect1TZ='Asia/Shanghai'; export TZ 修改配置文件1234vim etc/sysconfig/clockZONE=Asia/Shanghairm /etc/localtimeln -sf /usr/share/zoneinfo/Asia/Shanghai /etc/localtime 12345timedatectltimedatectl list-timezonestimedatectl set-timezone Asia/Shanghaiyum -y install ntpvim /etc/ntp.conf","categories":[{"name":"linux","slug":"linux","permalink":"http://yoursite.com/categories/linux/"}],"tags":[{"name":"linux","slug":"linux","permalink":"http://yoursite.com/tags/linux/"},{"name":"shell","slug":"shell","permalink":"http://yoursite.com/tags/shell/"}]},{"title":"Linux 聚合链路","slug":"team","date":"2018-12-02T16:00:00.000Z","updated":"2019-07-23T07:17:09.497Z","comments":true,"path":"2018/12/03/team/","link":"","permalink":"http://yoursite.com/2018/12/03/team/","excerpt":"","text":"broadcast（可将数据传送到所有端口）round-robin（可按顺序将数据传送到所有端口）active-backup（使用一个端口或链接时其他则处于备用状态）loadbalance（使用主动 Tx 负载平衡及基于 BPF 的 Tx 端口选择程序）lacp（采用 802.3ad 链接合并控制协议） 1. 安装 teamd默认不会安装网络成组守护进程 teamd。要安装 teamd 1yum -y install teamd 2. 添加配置1234567891011121314151617181920# 使用名称 team-ServerA 创建新的成组接口nmcli connection add type team ifname team-ServerAnmcli con show team-ServerA# 更改为成组分配的名称：nmcli con mod old-team-name connection.id new-team-name# 载入成组配置文件nmcli connection modify team-name team.config JSON-config# 检查 team.config 属性nmcli con show team-name | grep team.config# 在 Team0 中添加名为 Team0-port1 的接口 eth0nmcli con add type team-slave con-name Team0-port1 ifname eth0 master Team0# 添加另一个名为 Team0-port2 的接口 eth1nmcli con add type team-slave con-name Team0-port2 ifname eth1 master Team0# 激活端口nmcli connection up Team0-port1nmcli connection up Team0-port2# 验证是否已激活成组接口ip link# 或者使用命令启用该接口组nmcli connection up Team0 3. 配置文件要创建网络成组，作为成组端口或链接接口的虚拟接口需要一个 JSON 格式的配置文件。快捷的方法是复制示例配置文件，然后使用有 root 授权的编辑器进行编辑。 1234# 列出可用示例配置文件ls /usr/share/doc/teamd-*/example_configs/# 请使用以下命令查看包含的文件之一，比如 activebackup_ethtool_1.conf：cat /usr/share/doc/teamd-*/example_configs/activebackup_ethtool_1.conf","categories":[{"name":"linux","slug":"linux","permalink":"http://yoursite.com/categories/linux/"}],"tags":[{"name":"linux","slug":"linux","permalink":"http://yoursite.com/tags/linux/"},{"name":"network","slug":"network","permalink":"http://yoursite.com/tags/network/"}]},{"title":"Linux 网卡绑定","slug":"bond","date":"2018-12-01T16:00:00.000Z","updated":"2019-07-23T07:15:25.748Z","comments":true,"path":"2018/12/02/bond/","link":"","permalink":"http://yoursite.com/2018/12/02/bond/","excerpt":"","text":"1. 常见的网卡绑定驱动模式: mod=0 (balance-rr) Round-robin 衡抡循环策略特点：传输数据包顺序是依次传输（即：第1个包走eth0，下一个包就走eth1.一直循环下去，直到最后一个传输完毕），此模式提供负载平衡和容错能力；但是我们知道如果一个连接或者会话的数据包从不同的接口发出的话，中途再经过不同的链路，在客户端很有可能会出现数据包无序到达的问题，而无序到达的数据包需要重新要求被发送，这样网络的吞吐量就会下降 mode=1 (active-backup) 主-备份策略特点：只有一个设备处于活动状态，当一个宕掉另一个马上由备份转换为主设备。mac地址是外部可见得，从外面看来，bond的MAC地址是唯一的，以避免switch(交换机)发生混乱。此模式只提供了容错能力；由此可见此算法的优点是可以提供高网络连接的可用性，但是它的资源利用率较低，只有一个接口处于工作状态，在有 N 个网络接口的情况下，资源利用率为1/N mode=2 (balance-xor) XOR policy 平衡策略特点：基于指定的传输HASH策略传输数据包。缺省的策略是：(源MAC地址 XOR 目标MAC地址) % slave数量。其他的传输策略可以通过xmit_hash_policy选项指定，此模式提供负载平衡和容错能力 mode=3 (broadcast) 广播策略特点：在每个slave接口上传输每个数据包，此模式提供了容错能力 mode=4 (802.3ad) IEEE 802.3ad 动态链接聚合特点：创建一个聚合组，它们共享同样的速率和双工设定。根据802.3ad规范将多个slave工作在同一个激活的聚合体下。外出流量的slave选举是基于传输hash策略，该策略可以通过xmit_hash_policy选项从缺省的XOR策略改变到其他策略。需要注意的 是，并不是所有的传输策略都是802.3ad适应的，尤其考虑到在802.3ad标准43.2.4章节提及的包乱序问题。不同的实现可能会有不同的适应性。必要条件：条件1：ethtool支持获取每个slave的速率和双工设定条件2：switch(交换机)支持IEEE 802.3ad Dynamic link aggregation条件3：大多数switch(交换机)需要经过特定配置才能支持802.3ad模式 mode=5 (balance-tlb) Adaptive transmit load balancing 适配器传输负载均衡特点：不需要任何特别的switch(交换机)支持的通道bonding。在每个slave上根据当前的负载（根据速度计算）分配外出流量。如果正在接受数据的slave出故障了，另一个slave接管失败的slave的MAC地址。必要条件：ethtool支持获取每个slave的速率 mode=6 (balance-alb) Adaptive load balancing 适配器适应性负载均衡特点：该模式包含了balance-tlb模式，同时加上针对IPV4流量的接收负载均衡(receive load balance, rlb)，而且不需要任何switch(交换机)的支持。接收负载均衡是通过ARP协商实现的。bonding驱动截获本机发送的ARP应答，并把源硬件地址改写为bond中某个slave的唯一硬件地址，从而使得不同的对端使用不同的硬件地址进行通信。 2. 使用 nmcli 工具配置网卡绑定12345678nmcli con add type bond con-name mybond0 ifname bond0 mode balance-albnmcli con add type bond-slave ifname ens37 master mybond0nmcli con add type bond-slave ifname ens38 master mybond0nmcli con up bond-slave-ens7nmcli con modify mybond0 ipv4.method manualnmcli con modify mybond0 ipv4.addresses 192.168.78.137/24nmcli con modify mybond0 ipv4.gateway 192.168.78.2nmcli con modify mybond0 ipv4.dns 192.168.78.2 3. 使用命令行界面配置网卡绑定12# 显示 boding 模块信息modinfo bonding 3.1 创建频道绑定接口在 /etc/sysconfig/network-scripts/ 目录中创建名为 ifcfg-bondN 的文件，使用接口号码替换 N，比如 0。 123456789DEVICE=bond0NAME=bond0TYPE=BondBONDING_MASTER=yesIPADDR=192.168.1.1PREFIX=24ONBOOT=yesBOOTPROTO=noneBONDING_OPTS=&quot;bonding parameters separated by spaces&quot; 3.2 创建从属接口1234567DEVICE=ethNNAME=bond0-slaveTYPE=EthernetBOOTPROTO=noneONBOOT=yesMASTER=bond0SLAVE=yes 3.3 激活频道绑定1234567ifup ifcfg-eth0ifup ifcfg-eth1# 生效更改# nmcli con load /etc/sysconfig/network-script/ifcfg-devicenmcli con reload# 查看网卡绑定接口状态ip link show","categories":[{"name":"linux","slug":"linux","permalink":"http://yoursite.com/categories/linux/"}],"tags":[{"name":"linux","slug":"linux","permalink":"http://yoursite.com/tags/linux/"},{"name":"network","slug":"network","permalink":"http://yoursite.com/tags/network/"}]},{"title":"Tomcat 配置与优化","slug":"tomcat","date":"2018-11-30T16:00:00.000Z","updated":"2019-07-23T07:17:15.912Z","comments":true,"path":"2018/12/01/tomcat/","link":"","permalink":"http://yoursite.com/2018/12/01/tomcat/","excerpt":"","text":"1. JVM 配置添加 tomcat 管理员1[root@server ~]# vim /tomcat/conf/tomcat-users.xml 123&lt;role rolename=\"manager-gui\"/&gt;&lt;role rolename=\"admin-gui\"/&gt;&lt;user username=\"manager\" password=\"manager\" roles=\"admin-gui,manager-gui\"/&gt; 修改 JVM 虚拟内存 1JAVA_OPTS=\"-server -Xms1024m -Xmx1024m -Xmn256m -XX:PermSize=512m -XX:MaxPermSize=1024m -XX:ReservedCodeCacheSize=256M -Djava.awt.headless=true -Dfile.encoding=utf-8\" 堆设置： -Xms=n 初始堆大小-Xmx=n 最大堆大小-XX:NewSize=n 设置年轻代大小-XX:NewRatio=n 设置年轻代和年老代的比值.如:为3,表示年轻代与年老代比值为1:3,年轻代占整个年轻代年老代和的1/4-XX:SurvivorRatio=n 年轻代中Eden区与两个Survivor区的比值.注意Survivor区有两个.如:3,表示Eden:Survivor=3:2,一个Survivor区占整个年轻代的1/5-XX:MaxPermSize=n 设置持久代大小 收集器设置： -XX:+UseSerialGC 设置串行收集器-XX:+UseParallelGC 设置并行收集器-XX:+UseParalledlOldGC 设置并行年老代收集器-XX:+UseConcMarkSweepGC 设置并发收集器 垃圾回收统计信息： -XX:+PrintGC-XX:+PrintGCDetails-XX:+PrintGCTimeStamps-Xloggc:filename 并行收集器设置： -XX:ParallelGCThreads=n 设置并行收集器收集时使用的CPU数.并行收集线程数.-XX:MaxGCPauseMillis=n 设置并行收集最大暂停时间-XX:GCTimeRatio=n 设置垃圾回收时间占程序运行时间的百分比.公式为1/(1+n)并发收集器设置-XX:+CMSIncrementalMode 设置为增量模式.适用于单CPU情况.-XX:ParallelGCThreads=n 设置并发收集器年轻代收集方式为并行收集时,使用的CPU数.并行收集线程数 2. apr 安装安装依赖1[root@server ~]# yum -y install gcc expat-devel 安装 apr123[root@server ~]# mkdir /usr/local/apr[root@server apr-1.6.3]# ./configure --prefix=/usr/local/apr[root@server apr-1.6.3]# make &amp;&amp; make install 安装 apr-util12[root@server apr-util-1.6.1]# ./configure --prefix=/usr/local/apr --with-apr=/usr/local/apr[root@server apr-util-1.6.1]# make &amp;&amp; make install 安装 tomcat-native123[root@server ~]# cd tomcat-native-1.2.17-src/native/[root@server native]# ./configure --prefix=/usr/local/apr --with-apr=/usr/local/apr --with-java-home=/usr/java/jdk1.7.0_80/[root@server native]# make &amp;&amp; make install 修改 tomcat 配置1[root@server ~]# vim /tomcat/bin/catalina.sh 12# 添加 CATALINA_OPTSCATALINA_OPTS=\"-Djava.library.path=/usr/local/apr/lib\" 1[root@server ~]# vim /tomcat/conf/server.xml 123456789101112&lt;Connector port=\"8001\" protocol=\"org.apache.coyote.http11.Http11AprProtocol\" executor=\"tomcatThreadPool\" maxThreads=\"1000\" enableLookups=\"false\" acceptCount=\"1000\" connectionTimeout=\"30000\" redirectPort=\"9100\" maxPostSize=\"8388608\" maxParameterCount=\"40000\" disableUploadTimeout=\"true\" URIEncoding=\"UTF-8\"/&gt; 3. SSLEngine Error查看 tomcat 日志，出现 SSLEngine Errororg.apache.catalina.core.AprLifecycleListener.lifecycleEvent Failed to initialize the SSLEngine.{:.error} 解决办法1[root@server ~]# vim /tomcat/conf/server.xml 1&lt;Listener className=\"org.apache.catalina.core.AprLifecycleListener\" SSLEngine=\"off\" /&gt;","categories":[{"name":"linux","slug":"linux","permalink":"http://yoursite.com/categories/linux/"}],"tags":[{"name":"linux","slug":"linux","permalink":"http://yoursite.com/tags/linux/"},{"name":"tomcat","slug":"tomcat","permalink":"http://yoursite.com/tags/tomcat/"}]},{"title":"LVS","slug":"lvs","date":"2018-11-29T16:00:00.000Z","updated":"2019-07-23T07:16:21.879Z","comments":true,"path":"2018/11/30/lvs/","link":"","permalink":"http://yoursite.com/2018/11/30/lvs/","excerpt":"","text":"1. 安装 ipvsadm1[root@centos ~]# yum -y install ipvsadm 2. ipvsadm 用法1234567891011121314151617181920212223242526272829303132333435363738394041424344454647484950515253545556575859606162636465666768[root@centos ~]# ipvsadm --helpipvsadm v1.27 2008/5/15 (compiled with popt and IPVS v1.2.1)Usage: ipvsadm -A|E -t|u|f service-address [-s scheduler] [-p [timeout]] [-M netmask] [--pe persistence_engine] [-b sched-flags] ipvsadm -D -t|u|f service-address ipvsadm -C ipvsadm -R ipvsadm -S [-n] ipvsadm -a|e -t|u|f service-address -r server-address [options] ipvsadm -d -t|u|f service-address -r server-address ipvsadm -L|l [options] ipvsadm -Z [-t|u|f service-address] ipvsadm --set tcp tcpfin udp ipvsadm --start-daemon state [--mcast-interface interface] [--syncid sid] ipvsadm --stop-daemon state ipvsadm -hCommands:Either long or short options are allowed. --add-service -A add virtual service with options --edit-service -E edit virtual service with options --delete-service -D delete virtual service --clear -C clear the whole table --restore -R restore rules from stdin --save -S save rules to stdout --add-server -a add real server with options --edit-server -e edit real server with options --delete-server -d delete real server --list -L|-l list the table --zero -Z zero counters in a service or all services --set tcp tcpfin udp set connection timeout values --start-daemon start connection sync daemon --stop-daemon stop connection sync daemon --help -h display this help messageOptions: --tcp-service -t service-address service-address is host[:port] --udp-service -u service-address service-address is host[:port] --fwmark-service -f fwmark fwmark is an integer greater than zero --ipv6 -6 fwmark entry uses IPv6 --scheduler -s scheduler one of rr|wrr|lc|wlc|lblc|lblcr|dh|sh|sed|nq, the default scheduler is wlc. --pe engine alternate persistence engine may be sip, not set by default. --persistent -p [timeout] persistent service --netmask -M netmask persistent granularity mask --real-server -r server-address server-address is host (and port) --gatewaying -g gatewaying (direct routing) (default) --ipip -i ipip encapsulation (tunneling) --masquerading -m masquerading (NAT) --weight -w weight capacity of real server --u-threshold -x uthreshold upper threshold of connections --l-threshold -y lthreshold lower threshold of connections --mcast-interface interface multicast interface for connection sync --syncid sid syncid for connection sync (default=255) --connection -c output of current IPVS connections --timeout output of timeout (tcp tcpfin udp) --daemon output of daemon information --stats output of statistics information --rate output of rate information --exact expand numbers (display exact values) --thresholds output of thresholds information --persistent-conn output of persistent connection info --nosort disable sorting output of service/server entries --sort does nothing, for backwards compatibility --ops -o one-packet scheduling --numeric -n numeric output of addresses and ports --sched-flags -b flags scheduler flags (comma-separated) 3.","categories":[{"name":"linux","slug":"linux","permalink":"http://yoursite.com/categories/linux/"}],"tags":[{"name":"linux","slug":"linux","permalink":"http://yoursite.com/tags/linux/"},{"name":"lvs","slug":"lvs","permalink":"http://yoursite.com/tags/lvs/"}]},{"title":"Nginx","slug":"nginx","date":"2018-11-27T16:00:00.000Z","updated":"2019-07-23T07:16:37.412Z","comments":true,"path":"2018/11/28/nginx/","link":"","permalink":"http://yoursite.com/2018/11/28/nginx/","excerpt":"","text":"High-Performance Load Balancing（高可用负载均衡）1.1 HTTP Load Balancing 使用 NGINX 的 HTTP 模块使用 upstream 块在 HTTP 服务器上进行负载均衡 123456789upstream backend &#123; server 10.10.12.45:80 weight=1; server app.example.com:80 weight=2;&#125;server &#123; location / &#123; proxy_pass http://backend; &#125;&#125; 1.2 TCP Load Balancing 使用 NGINX 的 stream 模块使用 upstream 块在 TCP 服务器上进行负载均衡 123456789101112stream &#123; upstream mysql_read &#123; server read1.example.com:3306 weight=5; server read2.example.com:3306; server 10.10.12.34:3306 backup; &#125; server &#123; listen 3306; proxy_pass mysql_read; &#125;&#125; 1.3 Load-Balancing 方法 使用 NGINX 的负载平衡方法之一，例如least_conn, least_time, hash, ip_hash 这里将后端 upstream 池的负载平衡算法设置为最少连接。所有负载平衡算法（通用散列除外）都将是独立的指令，如前面的示例。通用散列采用单个参数（可以是变量的串联）来构建散列。 12345upstream backend &#123; least_conn; server backend.example.com; server backend1.example.com;&#125; 并非所有请求或数据包都具有相同的权重。鉴于此，循环，甚至是先前示例中使用的加权循环，将不适合所有应用程序或交通流量的需要。NGINX提供了许多负载平衡算法，可用于适应特定的用例。 这些负载平衡算法或方法不仅可以选择，还可以配置。 以下负载平衡方法可用于 upstream HTTP，TCP 和 UDP 池： Round robin（轮询）：默认负载平衡方法，按 upstream 池中服务器列表的顺序分配请求。对于加权循环，可以考虑权重，如果 upstream 服务器的容量变化，则可以使用加权循环。 权重的整数值越高，服务器在循环中的优势就越大。权重背后的算法只是加权平均的统计概率。循环法是默认的负载平衡算法，如果未指定其他算法，则使用该算法。 Least connections（）：另一种由 NGINX 提供的负载均衡方法。此方法通过将当前请求代理到具有通过 NGINX 代理的最少数量的打开连接的upstream服务器来平衡负载。在决定向哪个服务器发送连接时，最小连接（如循环）也会考虑权重。指令名称为 least_conn。 Least time（）：仅在 NGINX Plus 中可用，类似于最少连接，因为它代理具有最少数量的当前连接的upstream 服务器，但有利于具有最低平均响应时间的服务器。这种方法是最复杂的负载平衡算法之一，可满足高性能 Web 应用程序的需求。此算法是一个增加最少连接的值，因为少量连接并不一定意味着最快的响应。指令名称为 least_time。 Generic hash（）：管理员使用给定文本，请求或运行时的变量或两者来定义散列。NGINX 通过为当前请求生成哈希并将其放在 upstream 服务器上来分配服务器之间的负载。当您需要更多地控制发送请求的位置或确定哪些 upstream 服务器最有可能将数据缓存时，此方法非常有用。请注意，在池中添加或删除服务器时，将重新分配散列请求。该算法具有可选参数，一致，以最小化重新分布的影响。指令名称是 hash。 IP hash（）：仅支持HTTP，是最后一批。IP 哈希使用客户端 IP 地址作为哈希。与在通用散列中使用远程变量略有不同，此算法使用 IPv4 地址的前三个八位字节或整个 IPv6 地址。只要该服务器可用，此方法可确保客户端代理到同一个 upstream 服务器，这在会话状态受到关注且未由应用程序的共享内存处理时非常有用。 在分配散列时，此方法还会考虑权重参数。 指令名称为 ip_hash。 1.4 Connection Limiting 使用 NGINX Plus 的 max_conns 参数限制 upstream 服务器的连接数 1234567upstream backend &#123; zone backends 64k; queue 750 timeout=30s; server webserver1.example.com max_conns=25; server webserver2.example.com max_conns=15;&#125;","categories":[{"name":"linux","slug":"linux","permalink":"http://yoursite.com/categories/linux/"}],"tags":[{"name":"linux","slug":"linux","permalink":"http://yoursite.com/tags/linux/"},{"name":"nginx","slug":"nginx","permalink":"http://yoursite.com/tags/nginx/"}]},{"title":"Node.js 安装指南","slug":"nodejs","date":"2018-11-26T16:00:00.000Z","updated":"2019-07-23T07:16:40.485Z","comments":true,"path":"2018/11/27/nodejs/","link":"","permalink":"http://yoursite.com/2018/11/27/nodejs/","excerpt":"","text":"https://github.com/creationix/nvm To install or update nvm, you can use the install script using cURL: 1curl -o- https://raw.githubusercontent.com/creationix/nvm/v0.33.11/install.sh | bash or Wget: 1wget -qO- https://raw.githubusercontent.com/creationix/nvm/v0.33.11/install.sh | bash 123export NVM_DIR=\"$HOME/.nvm\"[ -s \"$NVM_DIR/nvm.sh\" ] &amp;&amp; \\. \"$NVM_DIR/nvm.sh\" # This loads nvm[ -s \"$NVM_DIR/bash_completion\" ] &amp;&amp; \\. \"$NVM_DIR/bash_completion\" # This loads nvm bash_completion","categories":[{"name":"linux","slug":"linux","permalink":"http://yoursite.com/categories/linux/"}],"tags":[{"name":"linux","slug":"linux","permalink":"http://yoursite.com/tags/linux/"},{"name":"nodejs","slug":"nodejs","permalink":"http://yoursite.com/tags/nodejs/"}]},{"title":"树莓派安装教程","slug":"raspberrypi","date":"2018-11-25T16:00:00.000Z","updated":"2019-07-23T07:16:59.204Z","comments":true,"path":"2018/11/26/raspberrypi/","link":"","permalink":"http://yoursite.com/2018/11/26/raspberrypi/","excerpt":"","text":"rasbian 网络配置1234567891011auto loiface lo inet loopbackauto eth0iface eth0 inet dhcpauto wlan0allow-hotplug wlan0iface wlan0 inet dhcpwpa-ssid &quot;360WiFi&quot;wpa-psk &quot;hellworld&quot; 树莓派安装 docker-ce1234567curl -fsSL https://download.docker.com/linux/debian/gpg | sudo apt-key add -echo &quot;deb [arch=armhf] https://mirrors.tuna.tsinghua.edu.cn/docker-ce/linux/debian $(lsb_release -cs) stable&quot; | sudo tee /etc/apt/sources.list.d/docker.listapt updateapt install docker-ce","categories":[{"name":"linux","slug":"linux","permalink":"http://yoursite.com/categories/linux/"}],"tags":[{"name":"linux","slug":"linux","permalink":"http://yoursite.com/tags/linux/"},{"name":"raspberrypi","slug":"raspberrypi","permalink":"http://yoursite.com/tags/raspberrypi/"}]},{"title":"SELinux","slug":"selinux","date":"2018-11-24T16:00:00.000Z","updated":"2019-07-23T07:17:02.519Z","comments":true,"path":"2018/11/25/selinux/","link":"","permalink":"http://yoursite.com/2018/11/25/selinux/","excerpt":"","text":"1. 上下文（以 apache 为例）1）服务器端安装 httpd123[root@server ~]# yum -y install httpd[root@server ~]# systemctl start httpd[root@server ~]# systemctl enable httpd 2）查看 httpd 默认目录的上下文12[root@server ~]# ls -ldZ /var/www/drwxr-xr-x. root root system_u:object_r:httpd_sys_content_t:s0 /var/www/ 3）设置临时上下文1234567891011121314151617[root@server ~]# mkdir /html[root@server ~]# ls -ldZ /html/drwxr-xr-x. root root unconfined_u:object_r:default_t:s0 /html/[root@server ~]# chcon -R -t httpd_sys_content_t /html/[root@server ~]# ls -ldZ /html/drwxr-xr-x. root root unconfined_u:object_r:httpd_sys_content_t:s0 /html/[root@server ~]# restorecon -R /html/[root@server ~]# ls -ldZ /html/drwxr-xr-x. root root unconfined_u:object_r:default_t:s0 /html/[root@server ~]# # --reference 设置和目录相同的上下文[root@server ~]# chcon -R --reference=/var/www/html /www 4）设置永久上下文123456789[root@server ~]# semanage fcontext -a -t httpd_sys_content_t &apos;/html(/.*)?&apos;[root@server ~]# ls -ldZ /htmldrwxr-xr-x. root root system_u:object_r:httpd_sys_content_t:s0 /html[root@server ~]# restorecon -R /html/[root@server ~]# ls -ldZ /htmldrwxr-xr-x. root root system_u:object_r:httpd_sys_content_t:s0 /html 2. 布尔值（以 vsftpd 为例） 如果搭建了一个服务，需要在客户端往服务里写东西，但是无法写入，按照以下不走排查 1）检查配置文件是否允许写2）检查文件系统是否允许写3）检查 selinux （上下文|布尔值） 1)服务端安装 vsftpd123[root@server ~]# yum -y install vsftpd[root@server ~]# systemctl start vsftpd[root@server ~]# systemctl enable vsftpd 2）检查配置文件是否允许写1[root@server ~]# vim /etc/vsftpd/vsftpd.conf 123# 允许匿名上传anon_upload_enable=YESanon_mkdir_write_enable=YES 3）检查文件系统是否允许写1234567891011[root@server ~]# ls -ld /var/ftp/drwxr-xr-x. 4 root root 27 8月 17 14:29 /var/ftp/[root@server ~]# cd /var/ftp/[root@server ftp]# mkdir test[root@server ftp]# chown -R ftp.ftp test[root@server ftp]# ls -ld testdrwxr-xr-x. 2 ftp ftp 6 8月 17 14:48 test 4）检查 selinux （上下文|布尔值）12345678910111213141516171819202122232425262728293031[root@server ~]# getsebool -a | grep ftpftpd_anon_write --&gt; offftpd_connect_all_unreserved --&gt; offftpd_connect_db --&gt; offftpd_full_access --&gt; offftpd_use_cifs --&gt; offftpd_use_fusefs --&gt; offftpd_use_nfs --&gt; offftpd_use_passive_mode --&gt; offhttpd_can_connect_ftp --&gt; offhttpd_enable_ftp_server --&gt; offtftp_anon_write --&gt; offtftp_home_dir --&gt; off[root@server ftp]# setsebool -P ftpd_anon_write on[root@server ftp]# setsebool -P ftpd_full_access on[root@server ~]# getsebool -a | grep ftpftpd_anon_write --&gt; onftpd_connect_all_unreserved --&gt; offftpd_connect_db --&gt; offftpd_full_access --&gt; onftpd_use_cifs --&gt; offftpd_use_fusefs --&gt; offftpd_use_nfs --&gt; offftpd_use_passive_mode --&gt; offhttpd_can_connect_ftp --&gt; offhttpd_enable_ftp_server --&gt; offtftp_anon_write --&gt; offtftp_home_dir --&gt; off","categories":[{"name":"linux","slug":"linux","permalink":"http://yoursite.com/categories/linux/"}],"tags":[{"name":"linux","slug":"linux","permalink":"http://yoursite.com/tags/linux/"},{"name":"selinux","slug":"selinux","permalink":"http://yoursite.com/tags/selinux/"}]},{"title":"Subversion 安装与配置","slug":"svn","date":"2018-11-23T16:00:00.000Z","updated":"2019-07-23T07:17:05.919Z","comments":true,"path":"2018/11/24/svn/","link":"","permalink":"http://yoursite.com/2018/11/24/svn/","excerpt":"","text":"1. 安装 Subversion1yum install -y subversion 2. 创建 SVN 版本库12mkdir -p /data/svn/myprojectsvnadmin create /data/svn/myproject 3. 配置 SVN 信息配置文件简介版本库中的配置目录 conf 有三个文件: authz 是权限控制文件 passwd 是帐号密码文件 svnserve.conf 是SVN服务综合配置文件 配置权限配置文件 authz示例代码：/data/svn/myproject/conf/authz 12345678910[groups] #用户组admin = admin,root,test #用户组所对应的用户[/] #库目录权限@admin = rw #用户组权限*=r #非用户组权限 配置账号密码文件 passwd示例代码：/data/svn/myproject/conf/passwd 123456[users]# harry = harryssecret# sally = sallyssecretadmin = 123456root = 123456test = 123456 配置 SVN 服务综合配置文件 svnserve.conf示例代码：/data/svn/myproject/conf/svnserve.conf 1234567891011121314[general]# force-username-case = none# 匿名访问的权限 可以是read、write，none，默认为readanon-access = none#使授权用户有写权限auth-access = write#密码数据库的路径password-db = passwd#访问控制文件authz-db = authz#认证命名空间，SVN会在认证提示里显示，并且作为凭证缓存的关键字realm = /data/svn/myproject[sasl] 4. 启动 SVN 服务启动 SVN1svnserve -d -r /data/svn checkout SVN项目12mkdir -p /data/workspace/myprojectsvn co svn://127.0.0.1/myproject /data/workspace/myproject --username root --password 123456 --force --no-auth-cache 提交文件到 SVN 服务器从本地提交文件到 SVN 服务器，其中 root 密码为 /data/svn/myproject/conf/passwd 文件存储的密码 1234cd /data/workspace/myprojectecho test &gt;&gt; test.txtsvn add test.txtsvn commit test.txt -m &apos;test&apos; 提交成功后可以通过如下命令从本地项目删除文件 12cd /data/workspace/myprojectrm -rf test.txt 删除后可以通过 SVN 服务器恢复 12cd /data/workspace/myprojectsvn update 清除SVN客户端密码方法：邮件选择TortoiseSVN中的settings选项—Saved Data—右边会发现有个Authentication data,点击clear，即完成清空账号密码操作，确认即可。下次就会自动弹出登录框。 在eclipse的svn插件中，我们也会保存密码，那么要清除时，换账号登录，就稍微麻烦点： 查看你的Eclipse中使用的是什么SVN 接口windows &gt; preference &gt; Team &gt; SVN 如果是用的JavaHL, 找到以下目录并删除auth目录.C:\\Documents and Settings\\User\\Application Data\\Subversion\\ 如果你用的SVNKit, 找到以下目录并删除.keyring文件.eclipse\\configuration\\org.eclipse.core.runtime\\","categories":[{"name":"linux","slug":"linux","permalink":"http://yoursite.com/categories/linux/"}],"tags":[{"name":"linux","slug":"linux","permalink":"http://yoursite.com/tags/linux/"},{"name":"svn","slug":"svn","permalink":"http://yoursite.com/tags/svn/"}]},{"title":"Ubuntu 网络配置","slug":"ubuntuserver","date":"2018-11-22T16:00:00.000Z","updated":"2019-07-23T07:17:19.293Z","comments":true,"path":"2018/11/23/ubuntuserver/","link":"","permalink":"http://yoursite.com/2018/11/23/ubuntuserver/","excerpt":"","text":"1. 查看所有网卡信息1ifconfig -a 2. 修改网卡配置文件1vim /etc/network/interfaces DHCP 1234567source /etc/network/interfaces.d/*auto loiface lo inet loopbackauto ens33iface ens33 inet dhcp STATIC 123456789101112131415source /etc/network/interfaces.d/*auto loiface lo inet loopbackauto ens33iface ens33 inet static# 克隆 mac 地址# pre-up ifconfig ens33 hw ether &lt;MACADDR&gt; address &lt;IPADDR&gt;gateway &lt;GATEWAY&gt;netmask &lt;NETMASK&gt;# network &lt;NETWORK&gt;# broadcast &lt;BROADCAST&gt;dns-nameservers &lt;DNS&gt;","categories":[{"name":"linux","slug":"linux","permalink":"http://yoursite.com/categories/linux/"}],"tags":[{"name":"linux","slug":"linux","permalink":"http://yoursite.com/tags/linux/"},{"name":"ubuntu","slug":"ubuntu","permalink":"http://yoursite.com/tags/ubuntu/"}]},{"title":"Vim","slug":"vim","date":"2018-11-21T16:00:00.000Z","updated":"2019-07-23T07:17:25.988Z","comments":true,"path":"2018/11/22/vim/","link":"","permalink":"http://yoursite.com/2018/11/22/vim/","excerpt":"","text":"编辑文件 /etc/vimrc123456789101112autocmd BufNewFile *.py,*.sh,*, exec &quot;:call SetTitle()&quot;let $author_name = &quot;jeremy&quot;let $filetype_name = strpart(expand(&quot;%&quot;), stridx(expand(&quot;%&quot;), &quot;.&quot;))let $file_name = strpart(expand(&quot;%&quot;), 0, stridx(expand(&quot;%&quot;), &quot;.&quot;))func SetTitle()if &amp;filetype == &apos;sh&apos;call setline(1, &quot;\\#!/bin/bash&quot;)call setline(2, &quot;\\# writen by: &quot;.$author_name)call setline(3, &quot;\\# file name: &quot;.$file_name.$filetype_name)endifendfunc","categories":[{"name":"linux","slug":"linux","permalink":"http://yoursite.com/categories/linux/"}],"tags":[{"name":"linux","slug":"linux","permalink":"http://yoursite.com/tags/linux/"},{"name":"vim","slug":"vim","permalink":"http://yoursite.com/tags/vim/"}]},{"title":"VirtualBox 遇到的问题","slug":"virtualbox","date":"2018-11-20T16:00:00.000Z","updated":"2019-07-23T07:17:34.106Z","comments":true,"path":"2018/11/21/virtualbox/","link":"","permalink":"http://yoursite.com/2018/11/21/virtualbox/","excerpt":"","text":"1、引导界面修改123Shell&gt; FS0:FS0:\\&gt; cd EFIFS0:\\EFI&gt; cp centos\\grubx64.efi BOOT\\grubx64.efi 2、系统界面修改1cp /boot/efi/EFI/centos/grubx64.efi /boot/efi/EFI/BOOT/grubx64.efi","categories":[{"name":"tools","slug":"tools","permalink":"http://yoursite.com/categories/tools/"}],"tags":[{"name":"virtualbox","slug":"virtualbox","permalink":"http://yoursite.com/tags/virtualbox/"}]},{"title":"FTP 教程","slug":"vsftpd","date":"2018-11-19T16:00:00.000Z","updated":"2019-07-23T07:17:37.141Z","comments":true,"path":"2018/11/20/vsftpd/","link":"","permalink":"http://yoursite.com/2018/11/20/vsftpd/","excerpt":"","text":"1. 安装 vsftpd123456789101112131415# 查看 selinux 状态getenforce# 查看防火墙状态service firewalld status# 安装 vsftpdyum -y install vsftpd# 设置开机启动systemctl enable vsftpd# 启动 vsftpd 服务systemctl start vsftpd# 防火墙开放 ftp 服务firewall-cmd --add-service=ftp --permanent# 查看和更改 ftp 的 sebool 值getsebool -a | grep ftpsetsebool ftpd_full_access on 2. 配置 vsftpd1vim /etc/vsftpd/vsftpd.conf vsftpd.conf 1234567# 不允许匿名访问 ftpanonymous_enable=NO# 用户不允许切换上级目录chroot_local_user=YESallow_writeable_chroot=YES# 设置时区use_localtime=YES 12# 修改配置后重启 vsftpdsystemctl restart vsftpd 3. 创建用户1234# 创建用户 [username]，不允许登陆，家目录为 [directory]useradd -s /sbin/nologin -m -d [directory] [username]# 设置密码echo \"[password]\" | passwd --stdin [username] 4. 验证1234# 安装 ftp 客户端yum -y install ftp# 连接 ftp 服务器ftp [ip]","categories":[{"name":"linux","slug":"linux","permalink":"http://yoursite.com/categories/linux/"}],"tags":[{"name":"linux","slug":"linux","permalink":"http://yoursite.com/tags/linux/"},{"name":"ftp","slug":"ftp","permalink":"http://yoursite.com/tags/ftp/"}]},{"title":"Windows LinuxSubSystem","slug":"wsl","date":"2018-11-18T16:00:00.000Z","updated":"2019-07-23T07:17:40.821Z","comments":true,"path":"2018/11/19/wsl/","link":"","permalink":"http://yoursite.com/2018/11/19/wsl/","excerpt":"","text":"安装 oh-my-zsh curl 1sh -c \"$(curl -fsSL https://raw.github.com/robbyrussell/oh-my-zsh/master/tools/install.sh)\" wget 1sh -c \"$(wget https://raw.github.com/robbyrussell/oh-my-zsh/master/tools/install.sh -O -)\" 更改默认 shell1chsh -s $(which zsh) 更改主题1vim ~/.zshrc 12ZSH_THEME=&quot;agnoster&quot;DEFAULT_USER=&quot;jeremy&quot; 问题 字体问题导致显示异常 解决办法：Windows 环境安装 powerline-fonts 并设置控制台字体https://github.com/powerline/fonts.git 启动vim的时候会出现字体变回原来的新宋体的情况： win + R -&gt; 运行 -&gt; 12```HKEY_CURRENT_USER\\Console\\C:_Program Files_WindowsApps_CanonicalGroupLimited.Ubuntu18.04onWindows_1804.2018.817.0_x64__79rhkp1fndgsc_ubuntu1804.exe 添加：CodePage (DWORD (32) 类型、值 0x01b5)","categories":[{"name":"tools","slug":"tools","permalink":"http://yoursite.com/categories/tools/"}],"tags":[{"name":"windows","slug":"windows","permalink":"http://yoursite.com/tags/windows/"},{"name":"wsl","slug":"wsl","permalink":"http://yoursite.com/tags/wsl/"}]},{"title":"Zabbix Proxy 分布式监控","slug":"zabbix _proxy","date":"2018-11-17T16:00:00.000Z","updated":"2019-07-23T07:17:44.088Z","comments":true,"path":"2018/11/18/zabbix _proxy/","link":"","permalink":"http://yoursite.com/2018/11/18/zabbix _proxy/","excerpt":"","text":"1. 安装 MySQL、Zabbix Prorxy1234567# 安装 MySQLapt install mysql-server# 安装 zabbix proxywget https://repo.zabbix.com/zabbix/3.4/ubuntu/pool/main/z/zabbix-release/zabbix-release_3.4-1+xenial_all.debdpkg -i zabbix-release_3.4-1+xenial_all.debapt updateapt install zabbix-server-mysql zabbix-agent zabbix-proxy-mysql zabbix-get zabbix-sender 2. 导入数据1mysql -uroot -p 1234--创建 zabbix_proxy 数据库create database zabbix_proxy character set utf8 collate utf8_bin;--授权grant all privileges on zabbix_proxy.* to zabbix@localhost identified by 'password'; 1zcat /usr/share/doc/zabbix-proxy-mysql/schema.sql.gz | mysql -uzabbix -pzabbix zabbix 3. 更改配置1vim /etc/zabbix/zabbix_proxy.conf 1234567891011121314151617Server=192.168.6.30Hostname=Zabbix proxyLogFile=/var/log/zabbix/zabbix_proxy.logLogFileSize=0PidFile=/var/run/zabbix/zabbix_proxy.pidSocketDir=/var/run/zabbixDBName=zabbixDBUser=zabbixDBPassword=zabbixConfigFrequency=120DataSenderFrequency=1SNMPTrapperFile=/var/log/snmptrap/snmptrap.logTimeout=30ExternalScripts=/usr/lib/zabbix/externalscriptsFpingLocation=/usr/bin/fpingFping6Location=/usr/bin/fping6LogSlowQueries=3000 4. 启动服务并设置开机启动1systemctl enable zabbix-proxy zabbix-agent mysql","categories":[{"name":"monitor","slug":"monitor","permalink":"http://yoursite.com/categories/monitor/"}],"tags":[{"name":"linux","slug":"linux","permalink":"http://yoursite.com/tags/linux/"},{"name":"zabbix","slug":"zabbix","permalink":"http://yoursite.com/tags/zabbix/"}]},{"title":"Zabbix 安装指南","slug":"zabbix_installation","date":"2018-11-16T16:00:00.000Z","updated":"2019-07-23T07:17:46.754Z","comments":true,"path":"2018/11/17/zabbix_installation/","link":"","permalink":"http://yoursite.com/2018/11/17/zabbix_installation/","excerpt":"","text":"CentOS 安装 zabbix3.41. 准备123rpm -i http://repo.zabbix.com/zabbix/3.4/rhel/7/x86_64/zabbix-release-3.4-2.el7.noarch.rpmyum install zabbix-server-mysql zabbix-web-mysql zabbix-agentyum -y install php-fpm php php-mysql php-gd php-bcmath php-mbstring php-xml php-ldap 2. 设置数据库123456/usr/bin/mysqladmin -u root password 123456mysql -uroot -ppasswordmysql&gt; create database zabbix character set utf8 collate utf8_bin;mysql&gt; grant all privileges on zabbix.* to zabbix@localhost identified by &apos;zabbix&apos;;mysql&gt; quit; 3. 数据库导入数据1zcat /usr/share/doc/zabbix-server-mysql*/create.sql.gz | mysql -uzabbix -p zabbix 4. 修改 zabbix 配置文件增加 DBPassword=zabbix1vim /etc/zabbix/zabbix_server.conf 1DBPassword=zabbix 5. 将时区设置为：亚洲/上海12vim /etc/httpd/conf.d/zabbix.confphp_value date.timezone Asia/Shanghai 6. 启动服务，将服务设为开机启动12systemctl restart zabbix-server zabbix-agent httpdsystemctl enable zabbix-server zabbix-agent httpd 7. 修改默认语言，文字配置123vim /usr/share/zabbix/include/locales.inc.phpcp simkai.ttf /usr/share/zabbix/fonts/vim /usr/share/zabbix/include/defines.inc.php","categories":[{"name":"monitor","slug":"monitor","permalink":"http://yoursite.com/categories/monitor/"}],"tags":[{"name":"linux","slug":"linux","permalink":"http://yoursite.com/tags/linux/"},{"name":"zabbix","slug":"zabbix","permalink":"http://yoursite.com/tags/zabbix/"}]},{"title":"Zabbix 通过 jmx 监控 Tomcat","slug":"zabbix_jmx","date":"2018-11-15T16:00:00.000Z","updated":"2019-07-23T07:17:49.388Z","comments":true,"path":"2018/11/16/zabbix_jmx/","link":"","permalink":"http://yoursite.com/2018/11/16/zabbix_jmx/","excerpt":"","text":"1. 安装 jdk 和 zabbix-java-gateway1234# 安装 openjdk 或者下载 tar.gzapt install openjdk-8-jdk# 安装 zabbix-java-gatewayapt install zabbix-java-gateway 2. 修改服务器端配置1vim /etc/zabbix/zabbix_server.conf 123JavaGateway=192.168.6.30JavaGatewayPort=10052StartJavaPollers=50 123systemctl restart zabbix-serversystemctl start zabbix-java-gatewaysystemctl enable zabbix-java-gateway 3. 配置被监控 tomcat1vim /tomcat/bin/catalina.sh 1CATALINA_OPTS=\"-Djava.rmi.server.hostname=&lt; 被监控 tomcat 主机 IP 地址 &gt; -Djavax.management.builder.initial= -Dcom.sun.management.jmxremote=true -Dcom.sun.management.jmxremote.port=12345 -Dcom.sun.management.jmxremote.ssl=false -Dcom.sun.management.jmxremote.authenticate=false\" 更改完成之后重启 tomcat 应用 4. zabbix web 配置 添加被监控 tomcat","categories":[{"name":"monitor","slug":"monitor","permalink":"http://yoursite.com/categories/monitor/"}],"tags":[{"name":"linux","slug":"linux","permalink":"http://yoursite.com/tags/linux/"},{"name":"tomcat","slug":"tomcat","permalink":"http://yoursite.com/tags/tomcat/"},{"name":"zabbix","slug":"zabbix","permalink":"http://yoursite.com/tags/zabbix/"}]},{"title":"Zabbix 通过 SNMP 进行监控","slug":"zabbix_snmp","date":"2018-11-14T16:00:00.000Z","updated":"2019-07-23T07:17:52.621Z","comments":true,"path":"2018/11/15/zabbix_snmp/","link":"","permalink":"http://yoursite.com/2018/11/15/zabbix_snmp/","excerpt":"","text":"SNMP 监控 Linux1. 被监控主机安装 net-snmp1[root@client ~]# yum install -y net-snmp 2. 修改配置文件1[root@client ~]# vim /etc/snmp/snmpd.conf 123456# sec.name source communitycom2sec notConfigUser default publicview systemview included .1view systemview included .1.3.6.1.2.1.1view systemview included .1.3.6.1.2.1.25.1.1 3. 启动12[root@client ~]# systemctl start snmpd.service[root@client ~]# netstat -nlp | grep 161 4. 在 zabbix server 上测试12[root@zabbix ~]# yum install -y net-snmp[root@zabbix ~]# snmpwalk -v 2c -c zabbix 192.168.1.51 | wc -l 5. zabbix的web界面添加主机 添加模板 设置 communities SNMP 监控 ESXI1. 开启 ESXI 的 SNMP 服务（允许所有主机访问） 设置 communities 1[root@esxi:~] esxcli system snmp set --communities public 开启 SNMP 服务 1[root@esxi:~] esxcli system snmp set --enable true 允许所有主机访问 SNMP 12[root@esxi:~] esxcli network firewall ruleset set --ruleset-id snmp --allowed-all trueAlready allowed all ip 设置防火墙 1[root@esxi:~] esxcli network firewall ruleset set --ruleset-id snmp --enabled true 重启 SNMP 服务 12345[root@esxi:~] /etc/init.d/snmpd restartroot: snmpd Running from interactive shell, running command: esxcli system snmp set -e false.root: snmpd setting up resource reservations.root: snmpd opening firewall port(s) for notifications.root: snmpd watchdog for snmpd started. 2. 开启 ESXI 主机的 SNMP 服务（允许特定主机访问） 禁止所有主机访问 SNMP 1[root@esxi:~] esxcli network firewall ruleset set --ruleset-id snmp --allowed-all false 设置防火墙 12[root@esxi:~] esxcli network firewall ruleset allowedip add --ruleset-id snmp --ip-address 10.0.101.0/24[root@esxi:~] esxcli network firewall ruleset set --ruleset-id snmp --enabled true 重启 SNMP 服务 1[root@esxi:~] /etc/init.d/snmpd restart 3. 测试是否能获取 SNMP 数据 在其他服务器上安装 SNMP 1[root@zabbix ~]# yum -y install net-snmp net-snmp-utils net-snmp-devel 测试获取信息 12[root@zabbix ~]# snmpwalk -v 2c -c sunwoda 192.168.9.24:161 | wc -l4594 4. Zabbix 添加主机 添加模板 设置 communities","categories":[{"name":"monitor","slug":"monitor","permalink":"http://yoursite.com/categories/monitor/"}],"tags":[{"name":"linux","slug":"linux","permalink":"http://yoursite.com/tags/linux/"},{"name":"zabbix","slug":"zabbix","permalink":"http://yoursite.com/tags/zabbix/"}]},{"title":"Zabbix 企业微信告警","slug":"zabbix_wechat_alert","date":"2018-11-13T16:00:00.000Z","updated":"2019-07-23T07:17:55.611Z","comments":true,"path":"2018/11/14/zabbix_wechat_alert/","link":"","permalink":"http://yoursite.com/2018/11/14/zabbix_wechat_alert/","excerpt":"","text":"1. 编辑 zabbix_server.conf 配置 zabbix 告警脚本路径1AlertScriptsPath=/usr/local/share/zabbix/alertscripts/ 2. 创建发送消息脚本 编写脚本 vim wechat.py 123456789101112131415161718192021222324252627282930313233#!/usr/bin/env python#coding=utf-8import requestsimport jsonimport osimport sys# 基本信息CropID = 'xxxxxxxxxx'Secret = 'xxxxxxxxxx'agentid = 'xxxxxxxxx'touser = 'xxxxxxxxxx' # 获取TokenGetToken =\"https://qyapi.weixin.qq.com/cgi-bin/gettoken?corpid=\"+ CropID + \"&amp;corpsecret=\" + Secretheaders = &#123;'Content-Type': 'application/json'&#125;json_data = json.loads(requests.get(GetToken).content.decode())token = json_data[\"access_token\"]# 消息发送接口Purl = \"https://qyapi.weixin.qq.com/cgi-bin/message/send?access_token=\" + token# 消息发送函数def sendmsg(message): weixin_msg = &#123; \"touser\" : \"TangYingJie\", \"msgtype\" : \"text\", \"agentid\" : 1000002, \"text\" : &#123; \"content\" : message &#125;, &#125; print requests.post(Purl,json.dumps(weixin_msg),headers=headers) if __name__ == '__main__': message = sys.argv[1] #获取第二个参数 sendmsg(message) 测试脚本发送消息 1./wechat.py 测试消息 3. 进入 zabbix 主界面配置报警媒介类型 用户 -&gt; 报警媒介 动作 -&gt; 操作 默认接收人 1&#123;TRIGGER.STATUS&#125; : &#123;TRIGGER.NAME&#125; 默认信息 12345678910当前状态 : &#123;TRIGGER.STATUS&#125;告警主机 : &#123;HOST.NAME&#125;告警地址 : &#123;HOST.IP&#125;告警时间 : &#123;EVENT.DATE&#125; &#123;EVENT.TIME&#125;告警等级 : &#123;TRIGGER.SEVERITY&#125;告警信息 : &#123;TRIGGER.NAME&#125;监控取值 : &#123;ITEM.VALUE&#125;监控项目 : &#123;ITEM.NAME&#125;持续时间 : &#123;EVENT.AGE&#125;事件ID : &#123;ITEM.ID&#125; 动作 -&gt; 恢复操作","categories":[{"name":"monitor","slug":"monitor","permalink":"http://yoursite.com/categories/monitor/"}],"tags":[{"name":"linux","slug":"linux","permalink":"http://yoursite.com/tags/linux/"},{"name":"python","slug":"python","permalink":"http://yoursite.com/tags/python/"},{"name":"zabbix","slug":"zabbix","permalink":"http://yoursite.com/tags/zabbix/"}]}]}